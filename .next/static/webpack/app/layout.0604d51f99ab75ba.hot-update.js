"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/lib/soundManager.ts":
/*!*********************************!*\
  !*** ./src/lib/soundManager.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SoundManager: () => (/* binding */ SoundManager),\n/* harmony export */   initGlobalSounds: () => (/* binding */ initGlobalSounds),\n/* harmony export */   soundManager: () => (/* binding */ soundManager),\n/* harmony export */   useSound: () => (/* binding */ useSound)\n/* harmony export */ });\n/**\n * 🎵 SIMPLIFIED WORKING SOUND SYSTEM FOR 1ABEL\n * All 18 OGG files - NO particles sound, actually works, global across pages\n */ class SoundManager {\n    async init() {\n        if (this.initialized) return;\n        try {\n            this.context = new (window.AudioContext || window.webkitAudioContext)();\n            this.initialized = true;\n            await this.preloadAllSounds();\n            console.log('🎵 Sound system initialized successfully');\n        } catch (error) {\n            console.warn('Audio context initialization failed:', error);\n        }\n    }\n    async preloadAllSounds() {\n        console.log('🎵 Loading all 18 sound files...');\n        const loadPromises = this.ALL_SOUNDS.map(async (soundName)=>{\n            try {\n                const response = await fetch(\"/sounds/\".concat(soundName, \".ogg\"));\n                if (!response.ok) {\n                    console.warn(\"Failed to fetch \".concat(soundName, \".ogg: \").concat(response.status));\n                    return;\n                }\n                const arrayBuffer = await response.arrayBuffer();\n                const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n                this.audioBuffers.set(soundName, audioBuffer);\n                console.log(\"✅ Loaded: \".concat(soundName, \".ogg\"));\n            } catch (error) {\n                console.warn(\"❌ Failed to load \".concat(soundName, \".ogg:\"), error);\n            }\n        });\n        await Promise.all(loadPromises);\n        console.log(\"\\uD83C\\uDFB5 Successfully loaded \".concat(this.audioBuffers.size, \"/\").concat(this.ALL_SOUNDS.length, \" sound files\"));\n    }\n    async playSound(soundName) {\n        let config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n            volume: 1\n        };\n        if (!this.context || !this.enabled || !this.audioBuffers.has(soundName)) {\n            console.log(\"\\uD83D\\uDD07 Cannot play \".concat(soundName, \": enabled=\").concat(this.enabled, \", hasBuffer=\").concat(this.audioBuffers.has(soundName)));\n            return null;\n        }\n        // Stop existing instance of this sound\n        const existingSource = this.currentSources.get(soundName);\n        if (existingSource) {\n            try {\n                existingSource.stop();\n            } catch (e) {\n            // Ignore - source might already be stopped\n            }\n            this.currentSources.delete(soundName);\n        }\n        const buffer = this.audioBuffers.get(soundName);\n        const source = this.context.createBufferSource();\n        const gainNode = this.context.createGain();\n        source.buffer = buffer;\n        source.connect(gainNode);\n        gainNode.connect(this.context.destination);\n        source.loop = config.loop || false;\n        const volume = this.globalVolume * config.volume;\n        // Smooth fade in\n        if (config.fadeIn && config.fadeIn > 0) {\n            gainNode.gain.setValueAtTime(0, this.context.currentTime);\n            gainNode.gain.linearRampToValueAtTime(volume, this.context.currentTime + config.fadeIn);\n        } else {\n            gainNode.gain.setValueAtTime(volume, this.context.currentTime);\n        }\n        // Smooth fade out if specified\n        if (config.fadeOut && config.fadeOut > 0) {\n            const fadeStartTime = this.context.currentTime + buffer.duration - config.fadeOut;\n            gainNode.gain.setValueAtTime(volume, fadeStartTime);\n            gainNode.gain.linearRampToValueAtTime(0, this.context.currentTime + buffer.duration);\n        }\n        this.currentSources.set(soundName, source);\n        source.onended = ()=>{\n            this.currentSources.delete(soundName);\n        };\n        source.start();\n        console.log(\"\\uD83C\\uDFB5 Playing: \".concat(soundName));\n        return source;\n    }\n    // 🎵 SIMPLE WORKING METHODS\n    // UI Sounds\n    async playUISound() {\n        const uiSounds = [\n            'ui-short',\n            'ui-long',\n            'click-project'\n        ];\n        const randomSound = uiSounds[Math.floor(Math.random() * uiSounds.length)];\n        await this.playSound(randomSound, {\n            volume: 0.3,\n            fadeIn: 0.1\n        });\n    }\n    // Typing sound specifically for text animations\n    async playTypingSound() {\n        // Use project-text sound for typing effect\n        await this.playSound('project-text', {\n            volume: 0.2\n        });\n    }\n    // Navigation sounds\n    async playEnter() {\n        await this.playSound('enter-project', {\n            volume: 0.4,\n            fadeIn: 0.3\n        });\n    }\n    async playLeave() {\n        await this.playSound('leave-project', {\n            volume: 0.3,\n            fadeOut: 0.5\n        });\n    }\n    // Logo/Identity sounds\n    async playLogo() {\n        await this.playSound('logo', {\n            volume: 0.5,\n            fadeIn: 0.2\n        });\n    }\n    async playManifesto() {\n        await this.playSound('manifesto', {\n            volume: 0.4,\n            fadeIn: 0.3\n        });\n    }\n    async playIgloo() {\n        await this.playSound('igloo', {\n            volume: 0.3,\n            fadeIn: 0.2\n        });\n    }\n    // Musical sequences\n    async playBeepSequence() {\n        await this.playSound('beeps', {\n            volume: 0.35\n        });\n        setTimeout(async ()=>await this.playSound('beeps2', {\n                volume: 0.35\n            }), 600);\n        setTimeout(async ()=>await this.playSound('beeps3', {\n                volume: 0.35\n            }), 1200);\n    }\n    // Mystical sounds (NO PARTICLES!)\n    async playMystical() {\n        await this.playSound('circles', {\n            volume: 0.25,\n            fadeIn: 0.5\n        });\n        setTimeout(async ()=>await this.playSound('shard', {\n                volume: 0.3,\n                fadeIn: 0.3\n            }), 500);\n    }\n    // 🌊 ATMOSPHERIC LAYERS\n    async startAtmosphere() {\n        if (!this.enabled || this.atmosphereStarted) return;\n        console.log('🌊 Starting atmospheric layers...');\n        this.atmosphereStarted = true;\n        // Wind - very gentle background\n        await this.playSound('wind', {\n            volume: 0.08,\n            loop: true,\n            fadeIn: 3\n        });\n        // Room tone - warm presence\n        setTimeout(async ()=>{\n            await this.playSound('room', {\n                volume: 0.12,\n                loop: true,\n                fadeIn: 2\n            });\n        }, 1000);\n        // Background music - subtle\n        setTimeout(async ()=>{\n            this.ambientMusic = await this.playSound('music-highq', {\n                volume: 0.10,\n                loop: true,\n                fadeIn: 4\n            });\n        }, 2000);\n    }\n    stopAtmosphere() {\n        this.AMBIENT_SOUNDS.forEach((soundName)=>{\n            const source = this.currentSources.get(soundName);\n            if (source) {\n                try {\n                    source.stop();\n                } catch (e) {\n                // Ignore\n                }\n                this.currentSources.delete(soundName);\n            }\n        });\n        if (this.ambientMusic) {\n            try {\n                this.ambientMusic.stop();\n            } catch (e) {\n            // Ignore\n            }\n            this.ambientMusic = null;\n        }\n        this.atmosphereStarted = false;\n    }\n    // 🎼 WELCOME SEQUENCE\n    async playWelcomeSequence() {\n        if (!this.enabled) return;\n        console.log('🎼 Playing welcome sequence...');\n        // Start with gentle UI sound\n        await this.playUISound();\n        // Start atmospheric layers\n        setTimeout(async ()=>await this.startAtmosphere(), 500);\n        // Play a gentle musical sequence\n        setTimeout(async ()=>await this.playBeepSequence(), 2000);\n        // Add some mystical elements\n        setTimeout(async ()=>await this.playMystical(), 4000);\n    }\n    // 🎛️ CONTROLS\n    enable() {\n        this.enabled = true;\n        console.log('🎵 Sound system ENABLED');\n        // Auto-start welcome sequence when enabled\n        setTimeout(()=>this.playWelcomeSequence(), 300);\n    }\n    disable() {\n        this.enabled = false;\n        this.stopAllSounds();\n        console.log('🔇 Sound system DISABLED');\n    }\n    setVolume(volume) {\n        this.globalVolume = Math.max(0, Math.min(1, volume));\n        console.log(\"\\uD83D\\uDD0A Volume set to \".concat(Math.round(this.globalVolume * 100), \"%\"));\n    }\n    stopAllSounds() {\n        this.currentSources.forEach((source, name)=>{\n            try {\n                source.stop();\n            } catch (e) {\n            // Ignore - source might already be stopped\n            }\n        });\n        this.currentSources.clear();\n        if (this.ambientMusic) {\n            try {\n                this.ambientMusic.stop();\n            } catch (e) {\n            // Ignore\n            }\n            this.ambientMusic = null;\n        }\n    }\n    constructor(){\n        this.enabled = false;\n        this.globalVolume = 0.4;\n        this.context = null;\n        this.initialized = false;\n        this.audioBuffers = new Map();\n        this.currentSources = new Map();\n        this.ambientMusic = null;\n        this.atmosphereStarted = false;\n        // 🎵 ALL 18 FILES (excluding particles from mystical sounds)\n        this.ALL_SOUNDS = [\n            'beeps',\n            'beeps2',\n            'beeps3',\n            'ui-short',\n            'ui-long',\n            'click-project',\n            'enter-project',\n            'leave-project',\n            'project-text',\n            'circles',\n            'shard',\n            'logo',\n            'manifesto',\n            'igloo',\n            'wind',\n            'room',\n            'music-highq'\n        ];\n        // 🌊 ATMOSPHERIC SOUNDS (gentle background)\n        this.AMBIENT_SOUNDS = [\n            'wind',\n            'room',\n            'music-highq'\n        ];\n        // Legacy compatibility\n        this.playHover = ()=>this.playUISound();\n        this.playClick = ()=>this.playUISound();\n        this.playSuccess = ()=>this.playBeepSequence();\n        if (true) {\n            // Initialize on any user interaction\n            const initOnInteraction = ()=>{\n                this.init();\n                document.removeEventListener('click', initOnInteraction);\n                document.removeEventListener('keydown', initOnInteraction);\n            };\n            document.addEventListener('click', initOnInteraction);\n            document.addEventListener('keydown', initOnInteraction);\n        }\n    }\n}\n// Global instance\nconst soundManager = new SoundManager();\n// React hook\nfunction useSound() {\n    return {\n        // Basic interactions\n        playHover: ()=>soundManager.playUISound(),\n        playClick: ()=>soundManager.playUISound(),\n        playEnter: ()=>soundManager.playEnter(),\n        playLeave: ()=>soundManager.playLeave(),\n        playUISound: ()=>soundManager.playUISound(),\n        playTypingSound: ()=>soundManager.playTypingSound(),\n        // Identity sounds\n        playLogo: ()=>soundManager.playLogo(),\n        playManifesto: ()=>soundManager.playManifesto(),\n        playIgloo: ()=>soundManager.playIgloo(),\n        // Musical elements\n        playBeeps: ()=>soundManager.playBeepSequence(),\n        playMystical: ()=>soundManager.playMystical(),\n        // Atmosphere\n        startAtmosphere: ()=>soundManager.startAtmosphere(),\n        stopAtmosphere: ()=>soundManager.stopAtmosphere(),\n        // Welcome\n        playWelcome: ()=>soundManager.playWelcomeSequence(),\n        // Controls\n        enable: ()=>soundManager.enable(),\n        disable: ()=>soundManager.disable(),\n        setVolume: (volume)=>soundManager.setVolume(volume),\n        stopAll: ()=>soundManager.stopAllSounds()\n    };\n}\n// Global sound initialization\nfunction initGlobalSounds() {\n    if (false) {}\n    console.log('🎵 Initializing global sound system...');\n    window.soundManager = soundManager;\n    // We don't auto-add sounds to all elements anymore\n    // to prevent random typing sounds on scroll\n    return ()=>{};\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/soundManager.ts\n"));

/***/ })

});