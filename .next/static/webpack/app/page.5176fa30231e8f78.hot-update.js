"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/soundManager.ts":
/*!*********************************!*\
  !*** ./src/lib/soundManager.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SoundManager: () => (/* binding */ SoundManager),\n/* harmony export */   addHoverSound: () => (/* binding */ addHoverSound),\n/* harmony export */   initInteractiveSounds: () => (/* binding */ initInteractiveSounds),\n/* harmony export */   soundManager: () => (/* binding */ soundManager),\n/* harmony export */   useSound: () => (/* binding */ useSound)\n/* harmony export */ });\n/**\n * Enhanced Sound Manager for 1ABEL - Beautiful OGG Audio System\n * Uses professional OGG audio files for immersive experience\n */ class SoundManager {\n    async init() {\n        if (this.initialized) return;\n        try {\n            this.context = new (window.AudioContext || window.webkitAudioContext)();\n            this.initialized = true;\n            // Preload key audio files\n            await this.preloadSounds();\n        } catch (error) {\n            console.warn('Audio context initialization failed:', error);\n        }\n    }\n    async preloadSounds() {\n        const soundFiles = [\n            'ui-short.ogg',\n            'ui-long.ogg',\n            'click-project.ogg',\n            'enter-project.ogg',\n            'leave-project.ogg',\n            'logo.ogg',\n            'beeps.ogg',\n            'beeps2.ogg',\n            'beeps3.ogg',\n            'particles.ogg',\n            'shard.ogg',\n            'wind.ogg',\n            'circles.ogg',\n            'manifesto.ogg',\n            'music-highq.ogg',\n            'room.ogg'\n        ];\n        for (const file of soundFiles){\n            try {\n                const response = await fetch(\"/sounds/\".concat(file));\n                const arrayBuffer = await response.arrayBuffer();\n                const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n                this.audioBuffers.set(file.replace('.ogg', ''), audioBuffer);\n            } catch (error) {\n                console.warn(\"Failed to load sound: \".concat(file), error);\n            }\n        }\n    }\n    async playSound(soundName) {\n        let config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n            volume: 1\n        };\n        if (!this.context || !this.enabled || !this.audioBuffers.has(soundName)) return;\n        const buffer = this.audioBuffers.get(soundName);\n        const source = this.context.createBufferSource();\n        const gainNode = this.context.createGain();\n        source.buffer = buffer;\n        source.connect(gainNode);\n        gainNode.connect(this.context.destination);\n        // Set volume\n        const volume = this.globalVolume * config.volume;\n        gainNode.gain.setValueAtTime(volume, this.context.currentTime);\n        // Handle fade in/out\n        if (config.fadeIn) {\n            gainNode.gain.setValueAtTime(0, this.context.currentTime);\n            gainNode.gain.linearRampToValueAtTime(volume, this.context.currentTime + config.fadeIn);\n        }\n        if (config.fadeOut) {\n            gainNode.gain.setValueAtTime(volume, this.context.currentTime + buffer.duration - config.fadeOut);\n            gainNode.gain.linearRampToValueAtTime(0, this.context.currentTime + buffer.duration);\n        }\n        // Handle looping\n        source.loop = config.loop || false;\n        // Store reference for potential stopping\n        this.currentlyPlaying.set(soundName, source);\n        // Clean up when finished\n        source.onended = ()=>{\n            this.currentlyPlaying.delete(soundName);\n        };\n        source.start();\n        return source;\n    }\n    // UI Sound Effects with OGG files\n    playHover() {\n        this.playSound('ui-short', {\n            volume: 0.3\n        });\n    }\n    playClick() {\n        this.playSound('click-project', {\n            volume: 0.5\n        });\n    }\n    playSuccess() {\n        this.playSound('beeps', {\n            volume: 0.4\n        });\n    }\n    playEnter() {\n        this.playSound('enter-project', {\n            volume: 0.6\n        });\n    }\n    playLeave() {\n        this.playSound('leave-project', {\n            volume: 0.4\n        });\n    }\n    playLogo() {\n        this.playSound('logo', {\n            volume: 0.5\n        });\n    }\n    playParticles() {\n        this.playSound('particles', {\n            volume: 0.3,\n            loop: true\n        });\n    }\n    playShard() {\n        this.playSound('shard', {\n            volume: 0.4\n        });\n    }\n    playBeeps() {\n        let variation = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n        const soundName = variation === 1 ? 'beeps' : variation === 2 ? 'beeps2' : 'beeps3';\n        this.playSound(soundName, {\n            volume: 0.4\n        });\n    }\n    playWind() {\n        this.playSound('wind', {\n            volume: 0.2,\n            loop: true,\n            fadeIn: 2\n        });\n    }\n    playCircles() {\n        this.playSound('circles', {\n            volume: 0.3\n        });\n    }\n    playManifesto() {\n        this.playSound('manifesto', {\n            volume: 0.5\n        });\n    }\n    // Background music\n    async startBackgroundMusic() {\n        if (this.backgroundMusic) return;\n        this.backgroundMusic = await this.playSound('music-highq', {\n            volume: 0.15,\n            loop: true,\n            fadeIn: 3\n        }) || null;\n    }\n    stopBackgroundMusic() {\n        if (this.backgroundMusic) {\n            this.backgroundMusic.stop();\n            this.backgroundMusic = null;\n        }\n    }\n    playRoomAmbient() {\n        this.playSound('room', {\n            volume: 0.2,\n            loop: true,\n            fadeIn: 2\n        });\n    }\n    stopSound(soundName) {\n        const source = this.currentlyPlaying.get(soundName);\n        if (source) {\n            source.stop();\n            this.currentlyPlaying.delete(soundName);\n        }\n    }\n    stopAllSounds() {\n        this.currentlyPlaying.forEach((source, name)=>{\n            source.stop();\n        });\n        this.currentlyPlaying.clear();\n        if (this.backgroundMusic) {\n            this.backgroundMusic.stop();\n            this.backgroundMusic = null;\n        }\n    }\n    enable() {\n        this.enabled = true;\n    }\n    disable() {\n        this.enabled = false;\n        this.stopAllSounds();\n    }\n    setVolume(volume) {\n        this.globalVolume = Math.max(0, Math.min(1, volume));\n    }\n    constructor(){\n        this.enabled = true;\n        this.globalVolume = 0.4;\n        this.context = null;\n        this.initialized = false;\n        this.audioBuffers = new Map();\n        this.currentlyPlaying = new Map();\n        this.backgroundMusic = null;\n        // Initialize on first user interaction\n        if (true) {\n            [\n                'click',\n                'touchstart',\n                'keydown'\n            ].forEach((event)=>{\n                window.addEventListener(event, ()=>this.init(), {\n                    once: true\n                });\n            });\n        }\n    }\n}\n// Global instance\nconst soundManager = new SoundManager();\n// React hook for using enhanced sound manager\nfunction useSound() {\n    return {\n        // Basic UI sounds\n        playHover: ()=>soundManager.playHover(),\n        playClick: ()=>soundManager.playClick(),\n        playSuccess: ()=>soundManager.playSuccess(),\n        // Enhanced sounds\n        playEnter: ()=>soundManager.playEnter(),\n        playLeave: ()=>soundManager.playLeave(),\n        playLogo: ()=>soundManager.playLogo(),\n        playParticles: ()=>soundManager.playParticles(),\n        playShard: ()=>soundManager.playShard(),\n        playBeeps: (variation)=>soundManager.playBeeps(variation),\n        playWind: ()=>soundManager.playWind(),\n        playCircles: ()=>soundManager.playCircles(),\n        playManifesto: ()=>soundManager.playManifesto(),\n        // Background sounds\n        startBackgroundMusic: ()=>soundManager.startBackgroundMusic(),\n        stopBackgroundMusic: ()=>soundManager.stopBackgroundMusic(),\n        playRoomAmbient: ()=>soundManager.playRoomAmbient(),\n        // Controls\n        stopSound: (name)=>soundManager.stopSound(name),\n        stopAllSounds: ()=>soundManager.stopAllSounds(),\n        enable: ()=>soundManager.enable(),\n        disable: ()=>soundManager.disable(),\n        setVolume: (volume)=>soundManager.setVolume(volume)\n    };\n}\n// Add enhanced hover sounds to elements\nfunction addHoverSound(element) {\n    let soundType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'default';\n    const handleMouseEnter = ()=>{\n        switch(soundType){\n            case 'enter':\n                soundManager.playEnter();\n                break;\n            case 'logo':\n                soundManager.playLogo();\n                break;\n            case 'shard':\n                soundManager.playShard();\n                break;\n            default:\n                soundManager.playHover();\n        }\n    };\n    const handleClick = ()=>soundManager.playClick();\n    const handleMouseLeave = ()=>{\n        if (soundType === 'enter') {\n            soundManager.playLeave();\n        }\n    };\n    element.addEventListener('mouseenter', handleMouseEnter);\n    element.addEventListener('click', handleClick);\n    element.addEventListener('mouseleave', handleMouseLeave);\n    // Return cleanup function\n    return ()=>{\n        element.removeEventListener('mouseenter', handleMouseEnter);\n        element.removeEventListener('click', handleClick);\n        element.removeEventListener('mouseleave', handleMouseLeave);\n    };\n}\n// Initialize interactive sounds for buttons with enhanced audio\nfunction initInteractiveSounds() {\n    if (false) {}\n    // Add sounds to different element types\n    const addSoundsToButtons = ()=>{\n        // Logo elements get special logo sound\n        const logoElements = document.querySelectorAll('[data-sound=\"logo\"]');\n        logoElements.forEach((element)=>{\n            if (element instanceof HTMLElement && !element.dataset.soundAdded) {\n                addHoverSound(element, 'logo');\n                element.dataset.soundAdded = 'true';\n            }\n        });\n        // Special entrance elements\n        const enterElements = document.querySelectorAll('[data-sound=\"enter\"]');\n        enterElements.forEach((element)=>{\n            if (element instanceof HTMLElement && !element.dataset.soundAdded) {\n                addHoverSound(element, 'enter');\n                element.dataset.soundAdded = 'true';\n            }\n        });\n        // Sharp/crystal elements\n        const shardElements = document.querySelectorAll('[data-sound=\"shard\"]');\n        shardElements.forEach((element)=>{\n            if (element instanceof HTMLElement && !element.dataset.soundAdded) {\n                addHoverSound(element, 'shard');\n                element.dataset.soundAdded = 'true';\n            }\n        });\n        // Regular buttons and links\n        const buttons = document.querySelectorAll('button, a[href], [role=\"button\"]');\n        buttons.forEach((button)=>{\n            if (button instanceof HTMLElement && !button.dataset.soundAdded && !button.dataset.sound) {\n                addHoverSound(button, 'default');\n                button.dataset.soundAdded = 'true';\n            }\n        });\n    };\n    // Initial setup\n    addSoundsToButtons();\n    // Re-run when DOM changes\n    const observer = new MutationObserver(()=>{\n        addSoundsToButtons();\n    });\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n    return ()=>observer.disconnect();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/soundManager.ts\n"));

/***/ })

});