"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/soundManager.ts":
/*!*********************************!*\
  !*** ./src/lib/soundManager.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SoundManager: () => (/* binding */ SoundManager),\n/* harmony export */   addHoverSound: () => (/* binding */ addHoverSound),\n/* harmony export */   initInteractiveSounds: () => (/* binding */ initInteractiveSounds),\n/* harmony export */   soundManager: () => (/* binding */ soundManager),\n/* harmony export */   useSound: () => (/* binding */ useSound)\n/* harmony export */ });\n/**\n * Enhanced Sound Manager for 1ABEL - Beautiful OGG Audio System\n * Uses professional OGG audio files for immersive experience\n */ class SoundManager {\n    async init() {\n        if (this.initialized) return;\n        try {\n            this.context = new (window.AudioContext || window.webkitAudioContext)();\n            this.initialized = true;\n            // Preload key audio files\n            await this.preloadSounds();\n        } catch (error) {\n            console.warn('Audio context initialization failed:', error);\n        }\n    }\n    async preloadSounds() {\n        const soundFiles = [\n            'ui-short.ogg',\n            'ui-long.ogg',\n            'click-project.ogg',\n            'enter-project.ogg',\n            'leave-project.ogg',\n            'logo.ogg',\n            'beeps.ogg',\n            'beeps2.ogg',\n            'beeps3.ogg',\n            'particles.ogg',\n            'shard.ogg',\n            'wind.ogg',\n            'circles.ogg',\n            'manifesto.ogg',\n            'music-highq.ogg',\n            'room.ogg'\n        ];\n        for (const file of soundFiles){\n            try {\n                const response = await fetch(\"/sounds/\".concat(file));\n                const arrayBuffer = await response.arrayBuffer();\n                const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n                this.audioBuffers.set(file.replace('.ogg', ''), audioBuffer);\n            } catch (error) {\n                console.warn(\"Failed to load sound: \".concat(file), error);\n            }\n        }\n    }\n    async playSound(soundName) {\n        let config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n            volume: 1\n        };\n        if (!this.context || !this.enabled || !this.audioBuffers.has(soundName)) {\n            console.log(\"Sound \".concat(soundName, \" not played: enabled=\").concat(this.enabled, \", context=\").concat(!!this.context, \", hasBuffer=\").concat(this.audioBuffers.has(soundName)));\n            return;\n        }\n        const buffer = this.audioBuffers.get(soundName);\n        const source = this.context.createBufferSource();\n        const gainNode = this.context.createGain();\n        source.buffer = buffer;\n        source.connect(gainNode);\n        gainNode.connect(this.context.destination);\n        // Set volume\n        const volume = this.globalVolume * config.volume;\n        gainNode.gain.setValueAtTime(volume, this.context.currentTime);\n        // Handle fade in/out\n        if (config.fadeIn) {\n            gainNode.gain.setValueAtTime(0, this.context.currentTime);\n            gainNode.gain.linearRampToValueAtTime(volume, this.context.currentTime + config.fadeIn);\n        }\n        if (config.fadeOut) {\n            gainNode.gain.setValueAtTime(volume, this.context.currentTime + buffer.duration - config.fadeOut);\n            gainNode.gain.linearRampToValueAtTime(0, this.context.currentTime + buffer.duration);\n        }\n        // Handle looping\n        source.loop = config.loop || false;\n        // Store reference for potential stopping\n        this.currentlyPlaying.set(soundName, source);\n        // Clean up when finished\n        source.onended = ()=>{\n            this.currentlyPlaying.delete(soundName);\n        };\n        source.start();\n        return source;\n    }\n    // UI Sound Effects with OGG files\n    playHover() {\n        this.playSound('ui-short', {\n            volume: 0.3\n        });\n    }\n    playClick() {\n        this.playSound('click-project', {\n            volume: 0.5\n        });\n    }\n    playSuccess() {\n        this.playSound('beeps', {\n            volume: 0.4\n        });\n    }\n    playEnter() {\n        this.playSound('enter-project', {\n            volume: 0.6\n        });\n    }\n    playLeave() {\n        this.playSound('leave-project', {\n            volume: 0.4\n        });\n    }\n    playLogo() {\n        this.playSound('logo', {\n            volume: 0.5\n        });\n    }\n    playParticles() {\n        this.playSound('particles', {\n            volume: 0.3,\n            loop: false\n        });\n    }\n    playShard() {\n        this.playSound('shard', {\n            volume: 0.4\n        });\n    }\n    playBeeps() {\n        let variation = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n        const soundName = variation === 1 ? 'beeps' : variation === 2 ? 'beeps2' : 'beeps3';\n        this.playSound(soundName, {\n            volume: 0.4\n        });\n    }\n    playWind() {\n        this.playSound('wind', {\n            volume: 0.2,\n            loop: false,\n            fadeIn: 1\n        });\n    }\n    playCircles() {\n        this.playSound('circles', {\n            volume: 0.3\n        });\n    }\n    playManifesto() {\n        this.playSound('manifesto', {\n            volume: 0.5\n        });\n    }\n    playIgloo() {\n        this.playSound('igloo', {\n            volume: 0.3\n        });\n    }\n    playProjectText() {\n        this.playSound('project-text', {\n            volume: 0.4\n        });\n    }\n    // Random sound variations\n    playRandomBeep() {\n        const variation = Math.floor(Math.random() * 3) + 1;\n        this.playBeeps(variation);\n    }\n    playRandomUI() {\n        const sounds = [\n            'ui-short',\n            'ui-long'\n        ];\n        const sound = sounds[Math.floor(Math.random() * sounds.length)];\n        this.playSound(sound, {\n            volume: 0.3\n        });\n    }\n    // Background music\n    async startBackgroundMusic() {\n        if (this.backgroundMusic) return;\n        this.backgroundMusic = await this.playSound('music-highq', {\n            volume: 0.15,\n            loop: true,\n            fadeIn: 3\n        }) || null;\n    }\n    stopBackgroundMusic() {\n        if (this.backgroundMusic) {\n            this.backgroundMusic.stop();\n            this.backgroundMusic = null;\n        }\n    }\n    playRoomAmbient() {\n        this.playSound('room', {\n            volume: 0.2,\n            loop: true,\n            fadeIn: 2\n        });\n    }\n    stopSound(soundName) {\n        const source = this.currentlyPlaying.get(soundName);\n        if (source) {\n            source.stop();\n            this.currentlyPlaying.delete(soundName);\n        }\n    }\n    stopAllSounds() {\n        this.currentlyPlaying.forEach((source, name)=>{\n            source.stop();\n        });\n        this.currentlyPlaying.clear();\n        if (this.backgroundMusic) {\n            this.backgroundMusic.stop();\n            this.backgroundMusic = null;\n        }\n    }\n    enable() {\n        this.enabled = true;\n        console.log('SoundManager enabled');\n    }\n    disable() {\n        this.enabled = false;\n        this.stopAllSounds();\n        console.log('SoundManager disabled');\n    }\n    setVolume(volume) {\n        this.globalVolume = Math.max(0, Math.min(1, volume));\n    }\n    constructor(){\n        this.enabled = false; // Start muted by default\n        this.globalVolume = 0.4;\n        this.context = null;\n        this.initialized = false;\n        this.audioBuffers = new Map();\n        this.currentlyPlaying = new Map();\n        this.backgroundMusic = null;\n        // Initialize on first user interaction\n        if (true) {\n            [\n                'click',\n                'touchstart',\n                'keydown'\n            ].forEach((event)=>{\n                window.addEventListener(event, ()=>this.init(), {\n                    once: true\n                });\n            });\n        }\n    }\n}\n// Global instance\nconst soundManager = new SoundManager();\n// React hook for using enhanced sound manager\nfunction useSound() {\n    return {\n        // Basic UI sounds\n        playHover: ()=>soundManager.playHover(),\n        playClick: ()=>soundManager.playClick(),\n        playSuccess: ()=>soundManager.playSuccess(),\n        // Enhanced sounds\n        playEnter: ()=>soundManager.playEnter(),\n        playLeave: ()=>soundManager.playLeave(),\n        playLogo: ()=>soundManager.playLogo(),\n        playParticles: ()=>soundManager.playParticles(),\n        playShard: ()=>soundManager.playShard(),\n        playBeeps: (variation)=>soundManager.playBeeps(variation),\n        playWind: ()=>soundManager.playWind(),\n        playCircles: ()=>soundManager.playCircles(),\n        playManifesto: ()=>soundManager.playManifesto(),\n        playIgloo: ()=>soundManager.playIgloo(),\n        playProjectText: ()=>soundManager.playProjectText(),\n        playRandomBeep: ()=>soundManager.playRandomBeep(),\n        playRandomUI: ()=>soundManager.playRandomUI(),\n        // Background sounds\n        startBackgroundMusic: ()=>soundManager.startBackgroundMusic(),\n        stopBackgroundMusic: ()=>soundManager.stopBackgroundMusic(),\n        playRoomAmbient: ()=>soundManager.playRoomAmbient(),\n        // Controls\n        stopSound: (name)=>soundManager.stopSound(name),\n        stopAllSounds: ()=>soundManager.stopAllSounds(),\n        enable: ()=>soundManager.enable(),\n        disable: ()=>soundManager.disable(),\n        setVolume: (volume)=>soundManager.setVolume(volume)\n    };\n}\n// Add enhanced hover sounds to elements\nfunction addHoverSound(element) {\n    let soundType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'default';\n    const handleMouseEnter = ()=>{\n        switch(soundType){\n            case 'enter':\n                soundManager.playEnter();\n                break;\n            case 'logo':\n                soundManager.playLogo();\n                break;\n            case 'shard':\n                soundManager.playShard();\n                break;\n            default:\n                soundManager.playHover();\n        }\n    };\n    const handleClick = ()=>soundManager.playClick();\n    const handleMouseLeave = ()=>{\n        if (soundType === 'enter') {\n            soundManager.playLeave();\n        }\n    };\n    element.addEventListener('mouseenter', handleMouseEnter);\n    element.addEventListener('click', handleClick);\n    element.addEventListener('mouseleave', handleMouseLeave);\n    // Return cleanup function\n    return ()=>{\n        element.removeEventListener('mouseenter', handleMouseEnter);\n        element.removeEventListener('click', handleClick);\n        element.removeEventListener('mouseleave', handleMouseLeave);\n    };\n}\n// Initialize interactive sounds for buttons with enhanced audio\nfunction initInteractiveSounds() {\n    if (false) {}\n    // Add sounds to different element types\n    const addSoundsToButtons = ()=>{\n        // Logo elements get special logo sound\n        const logoElements = document.querySelectorAll('[data-sound=\"logo\"]');\n        logoElements.forEach((element)=>{\n            if (element instanceof HTMLElement && !element.dataset.soundAdded) {\n                addHoverSound(element, 'logo');\n                element.dataset.soundAdded = 'true';\n            }\n        });\n        // Special entrance elements\n        const enterElements = document.querySelectorAll('[data-sound=\"enter\"]');\n        enterElements.forEach((element)=>{\n            if (element instanceof HTMLElement && !element.dataset.soundAdded) {\n                addHoverSound(element, 'enter');\n                element.dataset.soundAdded = 'true';\n            }\n        });\n        // Sharp/crystal elements\n        const shardElements = document.querySelectorAll('[data-sound=\"shard\"]');\n        shardElements.forEach((element)=>{\n            if (element instanceof HTMLElement && !element.dataset.soundAdded) {\n                addHoverSound(element, 'shard');\n                element.dataset.soundAdded = 'true';\n            }\n        });\n        // Regular buttons and links\n        const buttons = document.querySelectorAll('button, a[href], [role=\"button\"]');\n        buttons.forEach((button)=>{\n            if (button instanceof HTMLElement && !button.dataset.soundAdded && !button.dataset.sound) {\n                addHoverSound(button, 'default');\n                button.dataset.soundAdded = 'true';\n            }\n        });\n    };\n    // Initial setup\n    addSoundsToButtons();\n    // Re-run when DOM changes\n    const observer = new MutationObserver(()=>{\n        addSoundsToButtons();\n    });\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n    return ()=>observer.disconnect();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvc291bmRNYW5hZ2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBU00sTUFBTUE7SUFrQlgsTUFBY0MsT0FBTztRQUNuQixJQUFJLElBQUksQ0FBQ0MsV0FBVyxFQUFFO1FBRXRCLElBQUk7WUFDRixJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFLQyxDQUFBQSxPQUFPQyxZQUFZLElBQUksT0FBZ0JDLGtCQUFrQjtZQUM3RSxJQUFJLENBQUNKLFdBQVcsR0FBRztZQUVuQiwwQkFBMEI7WUFDMUIsTUFBTSxJQUFJLENBQUNLLGFBQWE7UUFDMUIsRUFBRSxPQUFPQyxPQUFPO1lBQ2RDLFFBQVFDLElBQUksQ0FBQyx3Q0FBd0NGO1FBQ3ZEO0lBQ0Y7SUFFQSxNQUFjRCxnQkFBZ0I7UUFDNUIsTUFBTUksYUFBYTtZQUNqQjtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtTQUNEO1FBRUQsS0FBSyxNQUFNQyxRQUFRRCxXQUFZO1lBQzdCLElBQUk7Z0JBQ0YsTUFBTUUsV0FBVyxNQUFNQyxNQUFNLFdBQWdCLE9BQUxGO2dCQUN4QyxNQUFNRyxjQUFjLE1BQU1GLFNBQVNFLFdBQVc7Z0JBQzlDLE1BQU1DLGNBQWMsTUFBTSxJQUFJLENBQUNiLE9BQU8sQ0FBRWMsZUFBZSxDQUFDRjtnQkFDeEQsSUFBSSxDQUFDRyxZQUFZLENBQUNDLEdBQUcsQ0FBQ1AsS0FBS1EsT0FBTyxDQUFDLFFBQVEsS0FBS0o7WUFDbEQsRUFBRSxPQUFPUixPQUFPO2dCQUNkQyxRQUFRQyxJQUFJLENBQUMseUJBQThCLE9BQUxFLE9BQVFKO1lBQ2hEO1FBQ0Y7SUFDRjtJQUVBLE1BQWNhLFVBQVVDLFNBQWlCLEVBQXVDO1lBQXJDQyxTQUFBQSxpRUFBc0I7WUFBRUMsUUFBUTtRQUFFO1FBQzNFLElBQUksQ0FBQyxJQUFJLENBQUNyQixP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Qk4sZUFBZSxDQUFDTSxPQUFPTCxPQUFPLENBQUNDLFVBQVUsSUFBSSxDQUFDSSxPQUFPTCxPQUFPLENBQUNwQyxLQUFLLEVBQUU7Z0JBQ3hGdUIsY0FBY2tCLFFBQVE7Z0JBQ3RCQSxPQUFPTCxPQUFPLENBQUNDLFVBQVUsR0FBRztZQUM5QjtRQUNGO0lBQ0Y7SUFFQSxnQkFBZ0I7SUFDaEJOO0lBRUEsMEJBQTBCO0lBQzFCLE1BQU1XLFdBQVcsSUFBSUMsaUJBQWlCO1FBQ3BDWjtJQUNGO0lBRUFXLFNBQVNFLE9BQU8sQ0FBQ1gsU0FBU1ksSUFBSSxFQUFFO1FBQzlCQyxXQUFXO1FBQ1hDLFNBQVM7SUFDWDtJQUVBLE9BQU8sSUFBTUwsU0FBU00sVUFBVTtBQUNsQyIsInNvdXJjZXMiOlsiL1VzZXJzL2FueXJvL0Rvd25sb2Fkcy9ob21lL3VidW50dS9pZ2xvb19jbG9uZS9zcmMvbGliL3NvdW5kTWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVuaGFuY2VkIFNvdW5kIE1hbmFnZXIgZm9yIDFBQkVMIC0gQmVhdXRpZnVsIE9HRyBBdWRpbyBTeXN0ZW1cbiAqIFVzZXMgcHJvZmVzc2lvbmFsIE9HRyBhdWRpbyBmaWxlcyBmb3IgaW1tZXJzaXZlIGV4cGVyaWVuY2VcbiAqL1xuXG5pbnRlcmZhY2UgU291bmRDb25maWcge1xuICB2b2x1bWU6IG51bWJlclxuICBsb29wPzogYm9vbGVhblxuICBmYWRlSW4/OiBudW1iZXJcbiAgZmFkZU91dD86IG51bWJlclxufVxuXG5leHBvcnQgY2xhc3MgU291bmRNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBlbmFibGVkOiBib29sZWFuID0gZmFsc2UgIC8vIFN0YXJ0IG11dGVkIGJ5IGRlZmF1bHRcbiAgcHJpdmF0ZSBnbG9iYWxWb2x1bWU6IG51bWJlciA9IDAuNFxuICBwcml2YXRlIGNvbnRleHQ6IEF1ZGlvQ29udGV4dCB8IG51bGwgPSBudWxsXG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQ6IGJvb2xlYW4gPSBmYWxzZVxuICBwcml2YXRlIGF1ZGlvQnVmZmVyczogTWFwPHN0cmluZywgQXVkaW9CdWZmZXI+ID0gbmV3IE1hcCgpXG4gIHByaXZhdGUgY3VycmVudGx5UGxheWluZzogTWFwPHN0cmluZywgQXVkaW9CdWZmZXJTb3VyY2VOb2RlPiA9IG5ldyBNYXAoKVxuICBwcml2YXRlIGJhY2tncm91bmRNdXNpYzogQXVkaW9CdWZmZXJTb3VyY2VOb2RlIHwgbnVsbCA9IG51bGxcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBJbml0aWFsaXplIG9uIGZpcnN0IHVzZXIgaW50ZXJhY3Rpb25cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIFsnY2xpY2snLCAndG91Y2hzdGFydCcsICdrZXlkb3duJ10uZm9yRWFjaChldmVudCA9PiB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCAoKSA9PiB0aGlzLmluaXQoKSwgeyBvbmNlOiB0cnVlIH0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaW5pdCgpIHtcbiAgICBpZiAodGhpcy5pbml0aWFsaXplZCkgcmV0dXJuXG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuY29udGV4dCA9IG5ldyAod2luZG93LkF1ZGlvQ29udGV4dCB8fCAod2luZG93IGFzIGFueSkud2Via2l0QXVkaW9Db250ZXh0KSgpXG4gICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZVxuICAgICAgXG4gICAgICAvLyBQcmVsb2FkIGtleSBhdWRpbyBmaWxlc1xuICAgICAgYXdhaXQgdGhpcy5wcmVsb2FkU291bmRzKClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCdBdWRpbyBjb250ZXh0IGluaXRpYWxpemF0aW9uIGZhaWxlZDonLCBlcnJvcilcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHByZWxvYWRTb3VuZHMoKSB7XG4gICAgY29uc3Qgc291bmRGaWxlcyA9IFtcbiAgICAgICd1aS1zaG9ydC5vZ2cnLFxuICAgICAgJ3VpLWxvbmcub2dnJywgXG4gICAgICAnY2xpY2stcHJvamVjdC5vZ2cnLFxuICAgICAgJ2VudGVyLXByb2plY3Qub2dnJyxcbiAgICAgICdsZWF2ZS1wcm9qZWN0Lm9nZycsXG4gICAgICAnbG9nby5vZ2cnLFxuICAgICAgJ2JlZXBzLm9nZycsXG4gICAgICAnYmVlcHMyLm9nZycsXG4gICAgICAnYmVlcHMzLm9nZycsXG4gICAgICAncGFydGljbGVzLm9nZycsXG4gICAgICAnc2hhcmQub2dnJyxcbiAgICAgICd3aW5kLm9nZycsXG4gICAgICAnY2lyY2xlcy5vZ2cnLFxuICAgICAgJ21hbmlmZXN0by5vZ2cnLFxuICAgICAgJ211c2ljLWhpZ2hxLm9nZycsXG4gICAgICAncm9vbS5vZ2cnXG4gICAgXVxuXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIHNvdW5kRmlsZXMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9zb3VuZHMvJHtmaWxlfWApXG4gICAgICAgIGNvbnN0IGFycmF5QnVmZmVyID0gYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKVxuICAgICAgICBjb25zdCBhdWRpb0J1ZmZlciA9IGF3YWl0IHRoaXMuY29udGV4dCEuZGVjb2RlQXVkaW9EYXRhKGFycmF5QnVmZmVyKVxuICAgICAgICB0aGlzLmF1ZGlvQnVmZmVycy5zZXQoZmlsZS5yZXBsYWNlKCcub2dnJywgJycpLCBhdWRpb0J1ZmZlcilcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgRmFpbGVkIHRvIGxvYWQgc291bmQ6ICR7ZmlsZX1gLCBlcnJvcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHBsYXlTb3VuZChzb3VuZE5hbWU6IHN0cmluZywgY29uZmlnOiBTb3VuZENvbmZpZyA9IHsgdm9sdW1lOiAxIH0pIHtcbiAgICBpZiAoIXRoaXMuY29udGV4dCB8fCAhdGhpcy5lbmFibGVkIHx8ICF0aGlzLmF1ZGlvQnVmZmVycy5oYXMoc291bmROYW1lKSkge1xuICAgICAgY29uc29sZS5sb2coYFNvdW5kICR7c291bmROYW1lfSBub3QgcGxheWVkOiBlbmFibGVkPSR7dGhpcy5lbmFibGVkfSwgY29udGV4dD0keyEhdGhpcy5jb250ZXh0fSwgaGFzQnVmZmVyPSR7dGhpcy5hdWRpb0J1ZmZlcnMuaGFzKHNvdW5kTmFtZSl9YClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuYXVkaW9CdWZmZXJzLmdldChzb3VuZE5hbWUpIVxuICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKVxuICAgIGNvbnN0IGdhaW5Ob2RlID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKVxuXG4gICAgc291cmNlLmJ1ZmZlciA9IGJ1ZmZlclxuICAgIHNvdXJjZS5jb25uZWN0KGdhaW5Ob2RlKVxuICAgIGdhaW5Ob2RlLmNvbm5lY3QodGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uKVxuXG4gICAgLy8gU2V0IHZvbHVtZVxuICAgIGNvbnN0IHZvbHVtZSA9IHRoaXMuZ2xvYmFsVm9sdW1lICogY29uZmlnLnZvbHVtZVxuICAgIGdhaW5Ob2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUodm9sdW1lLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpXG5cbiAgICAvLyBIYW5kbGUgZmFkZSBpbi9vdXRcbiAgICBpZiAoY29uZmlnLmZhZGVJbikge1xuICAgICAgZ2Fpbk5vZGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSgwLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpXG4gICAgICBnYWluTm9kZS5nYWluLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKHZvbHVtZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICsgY29uZmlnLmZhZGVJbilcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmZhZGVPdXQpIHtcbiAgICAgIGdhaW5Ob2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUodm9sdW1lLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyBidWZmZXIuZHVyYXRpb24gLSBjb25maWcuZmFkZU91dClcbiAgICAgIGdhaW5Ob2RlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMCwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICsgYnVmZmVyLmR1cmF0aW9uKVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBsb29waW5nXG4gICAgc291cmNlLmxvb3AgPSBjb25maWcubG9vcCB8fCBmYWxzZVxuXG4gICAgLy8gU3RvcmUgcmVmZXJlbmNlIGZvciBwb3RlbnRpYWwgc3RvcHBpbmdcbiAgICB0aGlzLmN1cnJlbnRseVBsYXlpbmcuc2V0KHNvdW5kTmFtZSwgc291cmNlKVxuXG4gICAgLy8gQ2xlYW4gdXAgd2hlbiBmaW5pc2hlZFxuICAgIHNvdXJjZS5vbmVuZGVkID0gKCkgPT4ge1xuICAgICAgdGhpcy5jdXJyZW50bHlQbGF5aW5nLmRlbGV0ZShzb3VuZE5hbWUpXG4gICAgfVxuXG4gICAgc291cmNlLnN0YXJ0KClcbiAgICByZXR1cm4gc291cmNlXG4gIH1cblxuICAvLyBVSSBTb3VuZCBFZmZlY3RzIHdpdGggT0dHIGZpbGVzXG4gIHB1YmxpYyBwbGF5SG92ZXIoKSB7XG4gICAgdGhpcy5wbGF5U291bmQoJ3VpLXNob3J0JywgeyB2b2x1bWU6IDAuMyB9KVxuICB9XG5cbiAgcHVibGljIHBsYXlDbGljaygpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgnY2xpY2stcHJvamVjdCcsIHsgdm9sdW1lOiAwLjUgfSlcbiAgfVxuXG4gIHB1YmxpYyBwbGF5U3VjY2VzcygpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgnYmVlcHMnLCB7IHZvbHVtZTogMC40IH0pXG4gIH1cblxuICBwdWJsaWMgcGxheUVudGVyKCkge1xuICAgIHRoaXMucGxheVNvdW5kKCdlbnRlci1wcm9qZWN0JywgeyB2b2x1bWU6IDAuNiB9KVxuICB9XG5cbiAgcHVibGljIHBsYXlMZWF2ZSgpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgnbGVhdmUtcHJvamVjdCcsIHsgdm9sdW1lOiAwLjQgfSlcbiAgfVxuXG4gIHB1YmxpYyBwbGF5TG9nbygpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgnbG9nbycsIHsgdm9sdW1lOiAwLjUgfSlcbiAgfVxuXG4gIHB1YmxpYyBwbGF5UGFydGljbGVzKCkge1xuICAgIHRoaXMucGxheVNvdW5kKCdwYXJ0aWNsZXMnLCB7IHZvbHVtZTogMC4zLCBsb29wOiBmYWxzZSB9KVxuICB9XG5cbiAgcHVibGljIHBsYXlTaGFyZCgpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgnc2hhcmQnLCB7IHZvbHVtZTogMC40IH0pXG4gIH1cblxuICBwdWJsaWMgcGxheUJlZXBzKHZhcmlhdGlvbjogbnVtYmVyID0gMSkge1xuICAgIGNvbnN0IHNvdW5kTmFtZSA9IHZhcmlhdGlvbiA9PT0gMSA/ICdiZWVwcycgOiB2YXJpYXRpb24gPT09IDIgPyAnYmVlcHMyJyA6ICdiZWVwczMnXG4gICAgdGhpcy5wbGF5U291bmQoc291bmROYW1lLCB7IHZvbHVtZTogMC40IH0pXG4gIH1cblxuICBwdWJsaWMgcGxheVdpbmQoKSB7XG4gICAgdGhpcy5wbGF5U291bmQoJ3dpbmQnLCB7IHZvbHVtZTogMC4yLCBsb29wOiBmYWxzZSwgZmFkZUluOiAxIH0pXG4gIH1cblxuICBwdWJsaWMgcGxheUNpcmNsZXMoKSB7XG4gICAgdGhpcy5wbGF5U291bmQoJ2NpcmNsZXMnLCB7IHZvbHVtZTogMC4zIH0pXG4gIH1cblxuICBwdWJsaWMgcGxheU1hbmlmZXN0bygpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgnbWFuaWZlc3RvJywgeyB2b2x1bWU6IDAuNSB9KVxuICB9XG5cbiAgcHVibGljIHBsYXlJZ2xvbygpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgnaWdsb28nLCB7IHZvbHVtZTogMC4zIH0pXG4gIH1cblxuICBwdWJsaWMgcGxheVByb2plY3RUZXh0KCkge1xuICAgIHRoaXMucGxheVNvdW5kKCdwcm9qZWN0LXRleHQnLCB7IHZvbHVtZTogMC40IH0pXG4gIH1cblxuICAvLyBSYW5kb20gc291bmQgdmFyaWF0aW9uc1xuICBwdWJsaWMgcGxheVJhbmRvbUJlZXAoKSB7XG4gICAgY29uc3QgdmFyaWF0aW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMykgKyAxXG4gICAgdGhpcy5wbGF5QmVlcHModmFyaWF0aW9uKVxuICB9XG5cbiAgcHVibGljIHBsYXlSYW5kb21VSSgpIHtcbiAgICBjb25zdCBzb3VuZHMgPSBbJ3VpLXNob3J0JywgJ3VpLWxvbmcnXVxuICAgIGNvbnN0IHNvdW5kID0gc291bmRzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNvdW5kcy5sZW5ndGgpXVxuICAgIHRoaXMucGxheVNvdW5kKHNvdW5kLCB7IHZvbHVtZTogMC4zIH0pXG4gIH1cblxuICAvLyBCYWNrZ3JvdW5kIG11c2ljXG4gIHB1YmxpYyBhc3luYyBzdGFydEJhY2tncm91bmRNdXNpYygpIHtcbiAgICBpZiAodGhpcy5iYWNrZ3JvdW5kTXVzaWMpIHJldHVyblxuICAgIFxuICAgIHRoaXMuYmFja2dyb3VuZE11c2ljID0gYXdhaXQgdGhpcy5wbGF5U291bmQoJ211c2ljLWhpZ2hxJywgeyBcbiAgICAgIHZvbHVtZTogMC4xNSwgXG4gICAgICBsb29wOiB0cnVlLCBcbiAgICAgIGZhZGVJbjogMyBcbiAgICB9KSB8fCBudWxsXG4gIH1cblxuICBwdWJsaWMgc3RvcEJhY2tncm91bmRNdXNpYygpIHtcbiAgICBpZiAodGhpcy5iYWNrZ3JvdW5kTXVzaWMpIHtcbiAgICAgIHRoaXMuYmFja2dyb3VuZE11c2ljLnN0b3AoKVxuICAgICAgdGhpcy5iYWNrZ3JvdW5kTXVzaWMgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHBsYXlSb29tQW1iaWVudCgpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgncm9vbScsIHsgdm9sdW1lOiAwLjIsIGxvb3A6IHRydWUsIGZhZGVJbjogMiB9KVxuICB9XG5cbiAgcHVibGljIHN0b3BTb3VuZChzb3VuZE5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuY3VycmVudGx5UGxheWluZy5nZXQoc291bmROYW1lKVxuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgIHNvdXJjZS5zdG9wKClcbiAgICAgIHRoaXMuY3VycmVudGx5UGxheWluZy5kZWxldGUoc291bmROYW1lKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdG9wQWxsU291bmRzKCkge1xuICAgIHRoaXMuY3VycmVudGx5UGxheWluZy5mb3JFYWNoKChzb3VyY2UsIG5hbWUpID0+IHtcbiAgICAgIHNvdXJjZS5zdG9wKClcbiAgICB9KVxuICAgIHRoaXMuY3VycmVudGx5UGxheWluZy5jbGVhcigpXG4gICAgXG4gICAgaWYgKHRoaXMuYmFja2dyb3VuZE11c2ljKSB7XG4gICAgICB0aGlzLmJhY2tncm91bmRNdXNpYy5zdG9wKClcbiAgICAgIHRoaXMuYmFja2dyb3VuZE11c2ljID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBlbmFibGUoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZVxuICAgIGNvbnNvbGUubG9nKCdTb3VuZE1hbmFnZXIgZW5hYmxlZCcpXG4gIH1cblxuICBwdWJsaWMgZGlzYWJsZSgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZVxuICAgIHRoaXMuc3RvcEFsbFNvdW5kcygpXG4gICAgY29uc29sZS5sb2coJ1NvdW5kTWFuYWdlciBkaXNhYmxlZCcpXG4gIH1cblxuICBwdWJsaWMgc2V0Vm9sdW1lKHZvbHVtZTogbnVtYmVyKSB7XG4gICAgdGhpcy5nbG9iYWxWb2x1bWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB2b2x1bWUpKVxuICB9XG59XG5cbi8vIEdsb2JhbCBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IHNvdW5kTWFuYWdlciA9IG5ldyBTb3VuZE1hbmFnZXIoKVxuXG4vLyBSZWFjdCBob29rIGZvciB1c2luZyBlbmhhbmNlZCBzb3VuZCBtYW5hZ2VyXG5leHBvcnQgZnVuY3Rpb24gdXNlU291bmQoKSB7XG4gIHJldHVybiB7XG4gICAgLy8gQmFzaWMgVUkgc291bmRzXG4gICAgcGxheUhvdmVyOiAoKSA9PiBzb3VuZE1hbmFnZXIucGxheUhvdmVyKCksXG4gICAgcGxheUNsaWNrOiAoKSA9PiBzb3VuZE1hbmFnZXIucGxheUNsaWNrKCksXG4gICAgcGxheVN1Y2Nlc3M6ICgpID0+IHNvdW5kTWFuYWdlci5wbGF5U3VjY2VzcygpLFxuICAgIFxuICAgIC8vIEVuaGFuY2VkIHNvdW5kc1xuICAgIHBsYXlFbnRlcjogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlFbnRlcigpLFxuICAgIHBsYXlMZWF2ZTogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlMZWF2ZSgpLFxuICAgIHBsYXlMb2dvOiAoKSA9PiBzb3VuZE1hbmFnZXIucGxheUxvZ28oKSxcbiAgICBwbGF5UGFydGljbGVzOiAoKSA9PiBzb3VuZE1hbmFnZXIucGxheVBhcnRpY2xlcygpLFxuICAgIHBsYXlTaGFyZDogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlTaGFyZCgpLFxuICAgIHBsYXlCZWVwczogKHZhcmlhdGlvbj86IG51bWJlcikgPT4gc291bmRNYW5hZ2VyLnBsYXlCZWVwcyh2YXJpYXRpb24pLFxuICAgIHBsYXlXaW5kOiAoKSA9PiBzb3VuZE1hbmFnZXIucGxheVdpbmQoKSxcbiAgICBwbGF5Q2lyY2xlczogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlDaXJjbGVzKCksXG4gICAgcGxheU1hbmlmZXN0bzogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlNYW5pZmVzdG8oKSxcbiAgICBwbGF5SWdsb286ICgpID0+IHNvdW5kTWFuYWdlci5wbGF5SWdsb28oKSxcbiAgICBwbGF5UHJvamVjdFRleHQ6ICgpID0+IHNvdW5kTWFuYWdlci5wbGF5UHJvamVjdFRleHQoKSxcbiAgICBwbGF5UmFuZG9tQmVlcDogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlSYW5kb21CZWVwKCksXG4gICAgcGxheVJhbmRvbVVJOiAoKSA9PiBzb3VuZE1hbmFnZXIucGxheVJhbmRvbVVJKCksXG4gICAgXG4gICAgLy8gQmFja2dyb3VuZCBzb3VuZHNcbiAgICBzdGFydEJhY2tncm91bmRNdXNpYzogKCkgPT4gc291bmRNYW5hZ2VyLnN0YXJ0QmFja2dyb3VuZE11c2ljKCksXG4gICAgc3RvcEJhY2tncm91bmRNdXNpYzogKCkgPT4gc291bmRNYW5hZ2VyLnN0b3BCYWNrZ3JvdW5kTXVzaWMoKSxcbiAgICBwbGF5Um9vbUFtYmllbnQ6ICgpID0+IHNvdW5kTWFuYWdlci5wbGF5Um9vbUFtYmllbnQoKSxcbiAgICBcbiAgICAvLyBDb250cm9sc1xuICAgIHN0b3BTb3VuZDogKG5hbWU6IHN0cmluZykgPT4gc291bmRNYW5hZ2VyLnN0b3BTb3VuZChuYW1lKSxcbiAgICBzdG9wQWxsU291bmRzOiAoKSA9PiBzb3VuZE1hbmFnZXIuc3RvcEFsbFNvdW5kcygpLFxuICAgIGVuYWJsZTogKCkgPT4gc291bmRNYW5hZ2VyLmVuYWJsZSgpLFxuICAgIGRpc2FibGU6ICgpID0+IHNvdW5kTWFuYWdlci5kaXNhYmxlKCksXG4gICAgc2V0Vm9sdW1lOiAodm9sdW1lOiBudW1iZXIpID0+IHNvdW5kTWFuYWdlci5zZXRWb2x1bWUodm9sdW1lKVxuICB9XG59XG5cbi8vIEFkZCBlbmhhbmNlZCBob3ZlciBzb3VuZHMgdG8gZWxlbWVudHNcbmV4cG9ydCBmdW5jdGlvbiBhZGRIb3ZlclNvdW5kKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzb3VuZFR5cGU6ICdkZWZhdWx0JyB8ICdlbnRlcicgfCAnbG9nbycgfCAnc2hhcmQnID0gJ2RlZmF1bHQnKSB7XG4gIGNvbnN0IGhhbmRsZU1vdXNlRW50ZXIgPSAoKSA9PiB7XG4gICAgc3dpdGNoIChzb3VuZFR5cGUpIHtcbiAgICAgIGNhc2UgJ2VudGVyJzpcbiAgICAgICAgc291bmRNYW5hZ2VyLnBsYXlFbnRlcigpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdsb2dvJzpcbiAgICAgICAgc291bmRNYW5hZ2VyLnBsYXlMb2dvKClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NoYXJkJzpcbiAgICAgICAgc291bmRNYW5hZ2VyLnBsYXlTaGFyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzb3VuZE1hbmFnZXIucGxheUhvdmVyKClcbiAgICB9XG4gIH1cbiAgXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlDbGljaygpXG4gIGNvbnN0IGhhbmRsZU1vdXNlTGVhdmUgPSAoKSA9PiB7XG4gICAgaWYgKHNvdW5kVHlwZSA9PT0gJ2VudGVyJykge1xuICAgICAgc291bmRNYW5hZ2VyLnBsYXlMZWF2ZSgpXG4gICAgfVxuICB9XG5cbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgaGFuZGxlTW91c2VFbnRlcilcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrKVxuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBoYW5kbGVNb3VzZUxlYXZlKVxuXG4gIC8vIFJldHVybiBjbGVhbnVwIGZ1bmN0aW9uXG4gIHJldHVybiAoKSA9PiB7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgaGFuZGxlTW91c2VFbnRlcilcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2spXG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgaGFuZGxlTW91c2VMZWF2ZSlcbiAgfVxufVxuXG4vLyBJbml0aWFsaXplIGludGVyYWN0aXZlIHNvdW5kcyBmb3IgYnV0dG9ucyB3aXRoIGVuaGFuY2VkIGF1ZGlvXG5leHBvcnQgZnVuY3Rpb24gaW5pdEludGVyYWN0aXZlU291bmRzKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVyblxuXG4gIC8vIEFkZCBzb3VuZHMgdG8gZGlmZmVyZW50IGVsZW1lbnQgdHlwZXNcbiAgY29uc3QgYWRkU291bmRzVG9CdXR0b25zID0gKCkgPT4ge1xuICAgIC8vIExvZ28gZWxlbWVudHMgZ2V0IHNwZWNpYWwgbG9nbyBzb3VuZFxuICAgIGNvbnN0IGxvZ29FbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXNvdW5kPVwibG9nb1wiXScpXG4gICAgbG9nb0VsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmICFlbGVtZW50LmRhdGFzZXQuc291bmRBZGRlZCkge1xuICAgICAgICBhZGRIb3ZlclNvdW5kKGVsZW1lbnQsICdsb2dvJylcbiAgICAgICAgZWxlbWVudC5kYXRhc2V0LnNvdW5kQWRkZWQgPSAndHJ1ZSdcbiAgICAgIH1cbiAgICB9KVxuICAgIFxuICAgIC8vIFNwZWNpYWwgZW50cmFuY2UgZWxlbWVudHNcbiAgICBjb25zdCBlbnRlckVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc291bmQ9XCJlbnRlclwiXScpXG4gICAgZW50ZXJFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiAhZWxlbWVudC5kYXRhc2V0LnNvdW5kQWRkZWQpIHtcbiAgICAgICAgYWRkSG92ZXJTb3VuZChlbGVtZW50LCAnZW50ZXInKVxuICAgICAgICBlbGVtZW50LmRhdGFzZXQuc291bmRBZGRlZCA9ICd0cnVlJ1xuICAgICAgfVxuICAgIH0pXG4gICAgXG4gICAgLy8gU2hhcnAvY3J5c3RhbCBlbGVtZW50c1xuICAgIGNvbnN0IHNoYXJkRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1zb3VuZD1cInNoYXJkXCJdJylcbiAgICBzaGFyZEVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmICFlbGVtZW50LmRhdGFzZXQuc291bmRBZGRlZCkge1xuICAgICAgICBhZGRIb3ZlclNvdW5kKGVsZW1lbnQsICdzaGFyZCcpXG4gICAgICAgIGVsZW1lbnQuZGF0YXNldC5zb3VuZEFkZGVkID0gJ3RydWUnXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIFJlZ3VsYXIgYnV0dG9ucyBhbmQgbGlua3NcbiAgICBjb25zdCBidXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uLCBhW2hyZWZdLCBbcm9sZT1cImJ1dHRvblwiXScpXG4gICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICBpZiAoYnV0dG9uIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgIWJ1dHRvbi5kYXRhc2V0LnNvdW5kQWRkZWQgJiYgIWJ1dHRvbi5kYXRhc2V0LnNvdW5kKSB7XG4gICAgICAgIGFkZEhvdmVyU291bmQoYnV0dG9uLCAnZGVmYXVsdCcpXG4gICAgICAgIGJ1dHRvbi5kYXRhc2V0LnNvdW5kQWRkZWQgPSAndHJ1ZSdcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gSW5pdGlhbCBzZXR1cFxuICBhZGRTb3VuZHNUb0J1dHRvbnMoKVxuXG4gIC8vIFJlLXJ1biB3aGVuIERPTSBjaGFuZ2VzXG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xuICAgIGFkZFNvdW5kc1RvQnV0dG9ucygpXG4gIH0pXG5cbiAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7XG4gICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgIHN1YnRyZWU6IHRydWVcbiAgfSlcblxuICByZXR1cm4gKCkgPT4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpXG59Il0sIm5hbWVzIjpbIlNvdW5kTWFuYWdlciIsImluaXQiLCJpbml0aWFsaXplZCIsImNvbnRleHQiLCJ3aW5kb3ciLCJBdWRpb0NvbnRleHQiLCJ3ZWJraXRBdWRpb0NvbnRleHQiLCJwcmVsb2FkU291bmRzIiwiZXJyb3IiLCJjb25zb2xlIiwid2FybiIsInNvdW5kRmlsZXMiLCJmaWxlIiwicmVzcG9uc2UiLCJmZXRjaCIsImFycmF5QnVmZmVyIiwiYXVkaW9CdWZmZXIiLCJkZWNvZGVBdWRpb0RhdGEiLCJhdWRpb0J1ZmZlcnMiLCJzZXQiLCJyZXBsYWNlIiwicGxheVNvdW5kIiwic291bmROYW1lIiwiY29uZmlnIiwidm9sdW1lIiwiZW5hYmxlZCIsImhhcyIsImxvZyIsImJ1ZmZlciIsImdldCIsInNvdXJjZSIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsImdhaW5Ob2RlIiwiY3JlYXRlR2FpbiIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsImdsb2JhbFZvbHVtZSIsImdhaW4iLCJzZXRWYWx1ZUF0VGltZSIsImN1cnJlbnRUaW1lIiwiZmFkZUluIiwibGluZWFyUmFtcFRvVmFsdWVBdFRpbWUiLCJmYWRlT3V0IiwiZHVyYXRpb24iLCJsb29wIiwiY3VycmVudGx5UGxheWluZyIsIm9uZW5kZWQiLCJkZWxldGUiLCJzdGFydCIsInBsYXlIb3ZlciIsInBsYXlDbGljayIsInBsYXlTdWNjZXNzIiwicGxheUVudGVyIiwicGxheUxlYXZlIiwicGxheUxvZ28iLCJwbGF5UGFydGljbGVzIiwicGxheVNoYXJkIiwicGxheUJlZXBzIiwidmFyaWF0aW9uIiwicGxheVdpbmQiLCJwbGF5Q2lyY2xlcyIsInBsYXlNYW5pZmVzdG8iLCJwbGF5SWdsb28iLCJwbGF5UHJvamVjdFRleHQiLCJwbGF5UmFuZG9tQmVlcCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInBsYXlSYW5kb21VSSIsInNvdW5kcyIsInNvdW5kIiwibGVuZ3RoIiwic3RhcnRCYWNrZ3JvdW5kTXVzaWMiLCJiYWNrZ3JvdW5kTXVzaWMiLCJzdG9wQmFja2dyb3VuZE11c2ljIiwic3RvcCIsInBsYXlSb29tQW1iaWVudCIsInN0b3BTb3VuZCIsInN0b3BBbGxTb3VuZHMiLCJmb3JFYWNoIiwibmFtZSIsImNsZWFyIiwiZW5hYmxlIiwiZGlzYWJsZSIsInNldFZvbHVtZSIsIm1heCIsIm1pbiIsIk1hcCIsImV2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uY2UiLCJzb3VuZE1hbmFnZXIiLCJ1c2VTb3VuZCIsImFkZEhvdmVyU291bmQiLCJlbGVtZW50Iiwic291bmRUeXBlIiwiaGFuZGxlTW91c2VFbnRlciIsImhhbmRsZUNsaWNrIiwiaGFuZGxlTW91c2VMZWF2ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpbml0SW50ZXJhY3RpdmVTb3VuZHMiLCJhZGRTb3VuZHNUb0J1dHRvbnMiLCJsb2dvRWxlbWVudHMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJIVE1MRWxlbWVudCIsImRhdGFzZXQiLCJzb3VuZEFkZGVkIiwiZW50ZXJFbGVtZW50cyIsInNoYXJkRWxlbWVudHMiLCJidXR0b25zIiwiYnV0dG9uIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImJvZHkiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiZGlzY29ubmVjdCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/soundManager.ts\n"));

/***/ })

});