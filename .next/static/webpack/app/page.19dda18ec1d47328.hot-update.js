"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/soundManager.ts":
/*!*********************************!*\
  !*** ./src/lib/soundManager.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SoundManager: () => (/* binding */ SoundManager),\n/* harmony export */   addHoverSound: () => (/* binding */ addHoverSound),\n/* harmony export */   initInteractiveSounds: () => (/* binding */ initInteractiveSounds),\n/* harmony export */   soundManager: () => (/* binding */ soundManager),\n/* harmony export */   useSound: () => (/* binding */ useSound)\n/* harmony export */ });\n/**\n * Enhanced Sound Manager for 1ABEL - Beautiful OGG Audio System\n * Uses professional OGG audio files for immersive experience\n */ class SoundManager {\n    async init() {\n        if (this.initialized) return;\n        try {\n            this.context = new (window.AudioContext || window.webkitAudioContext)();\n            this.initialized = true;\n            // Preload key audio files\n            await this.preloadSounds();\n        } catch (error) {\n            console.warn('Audio context initialization failed:', error);\n        }\n    }\n    async preloadSounds() {\n        const soundFiles = [\n            'ui-short.ogg',\n            'ui-long.ogg',\n            'click-project.ogg',\n            'enter-project.ogg',\n            'leave-project.ogg',\n            'logo.ogg',\n            'beeps.ogg',\n            'beeps2.ogg',\n            'beeps3.ogg',\n            'particles.ogg',\n            'shard.ogg',\n            'wind.ogg',\n            'circles.ogg',\n            'manifesto.ogg',\n            'music-highq.ogg',\n            'room.ogg'\n        ];\n        for (const file of soundFiles){\n            try {\n                const response = await fetch(\"/sounds/\".concat(file));\n                const arrayBuffer = await response.arrayBuffer();\n                const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n                this.audioBuffers.set(file.replace('.ogg', ''), audioBuffer);\n            } catch (error) {\n                console.warn(\"Failed to load sound: \".concat(file), error);\n            }\n        }\n    }\n    async playSound(soundName) {\n        let config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n            volume: 1\n        };\n        if (!this.context || !this.enabled || !this.audioBuffers.has(soundName)) {\n            console.log(\"Sound \".concat(soundName, \" not played: enabled=\").concat(this.enabled, \", context=\").concat(!!this.context, \", hasBuffer=\").concat(this.audioBuffers.has(soundName)));\n            return;\n        }\n        const buffer = this.audioBuffers.get(soundName);\n        const source = this.context.createBufferSource();\n        const gainNode = this.context.createGain();\n        source.buffer = buffer;\n        source.connect(gainNode);\n        gainNode.connect(this.context.destination);\n        // Set volume\n        const volume = this.globalVolume * config.volume;\n        gainNode.gain.setValueAtTime(volume, this.context.currentTime);\n        // Handle fade in/out\n        if (config.fadeIn) {\n            gainNode.gain.setValueAtTime(0, this.context.currentTime);\n            gainNode.gain.linearRampToValueAtTime(volume, this.context.currentTime + config.fadeIn);\n        }\n        if (config.fadeOut) {\n            gainNode.gain.setValueAtTime(volume, this.context.currentTime + buffer.duration - config.fadeOut);\n            gainNode.gain.linearRampToValueAtTime(0, this.context.currentTime + buffer.duration);\n        }\n        // Handle looping\n        source.loop = config.loop || false;\n        // Store reference for potential stopping\n        this.currentlyPlaying.set(soundName, source);\n        // Clean up when finished\n        source.onended = ()=>{\n            this.currentlyPlaying.delete(soundName);\n        };\n        source.start();\n        return source;\n    }\n    // UI Sound Effects with OGG files\n    playHover() {\n        this.playSound('ui-short', {\n            volume: 0.3\n        });\n    }\n    playClick() {\n        this.playSound('click-project', {\n            volume: 0.5\n        });\n    }\n    playSuccess() {\n        this.playSound('beeps', {\n            volume: 0.4\n        });\n    }\n    playEnter() {\n        this.playSound('enter-project', {\n            volume: 0.6\n        });\n    }\n    playLeave() {\n        this.playSound('leave-project', {\n            volume: 0.4\n        });\n    }\n    playLogo() {\n        this.playSound('logo', {\n            volume: 0.5\n        });\n    }\n    playParticles() {\n        this.playSound('particles', {\n            volume: 0.3,\n            loop: true\n        });\n    }\n    playShard() {\n        this.playSound('shard', {\n            volume: 0.4\n        });\n    }\n    playBeeps() {\n        let variation = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n        const soundName = variation === 1 ? 'beeps' : variation === 2 ? 'beeps2' : 'beeps3';\n        this.playSound(soundName, {\n            volume: 0.4\n        });\n    }\n    playWind() {\n        this.playSound('wind', {\n            volume: 0.2,\n            loop: true,\n            fadeIn: 2\n        });\n    }\n    playCircles() {\n        this.playSound('circles', {\n            volume: 0.3\n        });\n    }\n    playManifesto() {\n        this.playSound('manifesto', {\n            volume: 0.5\n        });\n    }\n    playIgloo() {\n        this.playSound('igloo', {\n            volume: 0.3\n        });\n    }\n    playProjectText() {\n        this.playSound('project-text', {\n            volume: 0.4\n        });\n    }\n    // Random sound variations\n    playRandomBeep() {\n        const variation = Math.floor(Math.random() * 3) + 1;\n        this.playBeeps(variation);\n    }\n    playRandomUI() {\n        const sounds = [\n            'ui-short',\n            'ui-long'\n        ];\n        const sound = sounds[Math.floor(Math.random() * sounds.length)];\n        this.playSound(sound, {\n            volume: 0.3\n        });\n    }\n    // Background music\n    async startBackgroundMusic() {\n        if (this.backgroundMusic) return;\n        this.backgroundMusic = await this.playSound('music-highq', {\n            volume: 0.15,\n            loop: true,\n            fadeIn: 3\n        }) || null;\n    }\n    stopBackgroundMusic() {\n        if (this.backgroundMusic) {\n            this.backgroundMusic.stop();\n            this.backgroundMusic = null;\n        }\n    }\n    playRoomAmbient() {\n        this.playSound('room', {\n            volume: 0.2,\n            loop: true,\n            fadeIn: 2\n        });\n    }\n    stopSound(soundName) {\n        const source = this.currentlyPlaying.get(soundName);\n        if (source) {\n            source.stop();\n            this.currentlyPlaying.delete(soundName);\n        }\n    }\n    stopAllSounds() {\n        this.currentlyPlaying.forEach((source, name)=>{\n            source.stop();\n        });\n        this.currentlyPlaying.clear();\n        if (this.backgroundMusic) {\n            this.backgroundMusic.stop();\n            this.backgroundMusic = null;\n        }\n    }\n    enable() {\n        this.enabled = true;\n    }\n    disable() {\n        this.enabled = false;\n        this.stopAllSounds();\n    }\n    setVolume(volume) {\n        this.globalVolume = Math.max(0, Math.min(1, volume));\n    }\n    constructor(){\n        this.enabled = false; // Start muted by default\n        this.globalVolume = 0.4;\n        this.context = null;\n        this.initialized = false;\n        this.audioBuffers = new Map();\n        this.currentlyPlaying = new Map();\n        this.backgroundMusic = null;\n        // Initialize on first user interaction\n        if (true) {\n            [\n                'click',\n                'touchstart',\n                'keydown'\n            ].forEach((event)=>{\n                window.addEventListener(event, ()=>this.init(), {\n                    once: true\n                });\n            });\n        }\n    }\n}\n// Global instance\nconst soundManager = new SoundManager();\n// React hook for using enhanced sound manager\nfunction useSound() {\n    return {\n        // Basic UI sounds\n        playHover: ()=>soundManager.playHover(),\n        playClick: ()=>soundManager.playClick(),\n        playSuccess: ()=>soundManager.playSuccess(),\n        // Enhanced sounds\n        playEnter: ()=>soundManager.playEnter(),\n        playLeave: ()=>soundManager.playLeave(),\n        playLogo: ()=>soundManager.playLogo(),\n        playParticles: ()=>soundManager.playParticles(),\n        playShard: ()=>soundManager.playShard(),\n        playBeeps: (variation)=>soundManager.playBeeps(variation),\n        playWind: ()=>soundManager.playWind(),\n        playCircles: ()=>soundManager.playCircles(),\n        playManifesto: ()=>soundManager.playManifesto(),\n        // Background sounds\n        startBackgroundMusic: ()=>soundManager.startBackgroundMusic(),\n        stopBackgroundMusic: ()=>soundManager.stopBackgroundMusic(),\n        playRoomAmbient: ()=>soundManager.playRoomAmbient(),\n        // Controls\n        stopSound: (name)=>soundManager.stopSound(name),\n        stopAllSounds: ()=>soundManager.stopAllSounds(),\n        enable: ()=>soundManager.enable(),\n        disable: ()=>soundManager.disable(),\n        setVolume: (volume)=>soundManager.setVolume(volume)\n    };\n}\n// Add enhanced hover sounds to elements\nfunction addHoverSound(element) {\n    let soundType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'default';\n    const handleMouseEnter = ()=>{\n        switch(soundType){\n            case 'enter':\n                soundManager.playEnter();\n                break;\n            case 'logo':\n                soundManager.playLogo();\n                break;\n            case 'shard':\n                soundManager.playShard();\n                break;\n            default:\n                soundManager.playHover();\n        }\n    };\n    const handleClick = ()=>soundManager.playClick();\n    const handleMouseLeave = ()=>{\n        if (soundType === 'enter') {\n            soundManager.playLeave();\n        }\n    };\n    element.addEventListener('mouseenter', handleMouseEnter);\n    element.addEventListener('click', handleClick);\n    element.addEventListener('mouseleave', handleMouseLeave);\n    // Return cleanup function\n    return ()=>{\n        element.removeEventListener('mouseenter', handleMouseEnter);\n        element.removeEventListener('click', handleClick);\n        element.removeEventListener('mouseleave', handleMouseLeave);\n    };\n}\n// Initialize interactive sounds for buttons with enhanced audio\nfunction initInteractiveSounds() {\n    if (false) {}\n    // Add sounds to different element types\n    const addSoundsToButtons = ()=>{\n        // Logo elements get special logo sound\n        const logoElements = document.querySelectorAll('[data-sound=\"logo\"]');\n        logoElements.forEach((element)=>{\n            if (element instanceof HTMLElement && !element.dataset.soundAdded) {\n                addHoverSound(element, 'logo');\n                element.dataset.soundAdded = 'true';\n            }\n        });\n        // Special entrance elements\n        const enterElements = document.querySelectorAll('[data-sound=\"enter\"]');\n        enterElements.forEach((element)=>{\n            if (element instanceof HTMLElement && !element.dataset.soundAdded) {\n                addHoverSound(element, 'enter');\n                element.dataset.soundAdded = 'true';\n            }\n        });\n        // Sharp/crystal elements\n        const shardElements = document.querySelectorAll('[data-sound=\"shard\"]');\n        shardElements.forEach((element)=>{\n            if (element instanceof HTMLElement && !element.dataset.soundAdded) {\n                addHoverSound(element, 'shard');\n                element.dataset.soundAdded = 'true';\n            }\n        });\n        // Regular buttons and links\n        const buttons = document.querySelectorAll('button, a[href], [role=\"button\"]');\n        buttons.forEach((button)=>{\n            if (button instanceof HTMLElement && !button.dataset.soundAdded && !button.dataset.sound) {\n                addHoverSound(button, 'default');\n                button.dataset.soundAdded = 'true';\n            }\n        });\n    };\n    // Initial setup\n    addSoundsToButtons();\n    // Re-run when DOM changes\n    const observer = new MutationObserver(()=>{\n        addSoundsToButtons();\n    });\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n    return ()=>observer.disconnect();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvc291bmRNYW5hZ2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBU00sTUFBTUE7SUFrQlgsTUFBY0MsT0FBTztRQUNuQixJQUFJLElBQUksQ0FBQ0MsV0FBVyxFQUFFO1FBRXRCLElBQUk7WUFDRixJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFLQyxDQUFBQSxPQUFPQyxZQUFZLElBQUksT0FBZ0JDLGtCQUFrQjtZQUM3RSxJQUFJLENBQUNKLFdBQVcsR0FBRztZQUVuQiwwQkFBMEI7WUFDMUIsTUFBTSxJQUFJLENBQUNLLGFBQWE7UUFDMUIsRUFBRSxPQUFPQyxPQUFPO1lBQ2RDLFFBQVFDLElBQUksQ0FBQyx3Q0FBd0NGO1FBQ3ZEO0lBQ0Y7SUFFQSxNQUFjRCxnQkFBZ0I7UUFDNUIsTUFBTUksYUFBYTtZQUNqQjtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtTQUNEO1FBRUQsS0FBSyxNQUFNQyxRQUFRRCxXQUFZO1lBQzdCLElBQUk7Z0JBQ0YsTUFBTUUsV0FBVyxNQUFNQyxNQUFNLFdBQWdCLE9BQUxGO2dCQUN4QyxNQUFNRyxjQUFjLE1BQU1GLFNBQVNFLFdBQVc7Z0JBQzlDLE1BQU1DLGNBQWMsTUFBTSxJQUFJLENBQUNiLE9BQU8sQ0FBRWMsZUFBZSxDQUFDRjtnQkFDeEQsSUFBSSxDQUFDRyxZQUFZLENBQUNDLEdBQUcsQ0FBQ1AsS0FBS1EsT0FBTyxDQUFDLFFBQVEsS0FBS0o7WUFDbEQsRUFBRSxPQUFPUixPQUFPO2dCQUNkQyxRQUFRQyxJQUFJLENBQUMseUJBQThCLE9BQUxFLE9BQVFKO1lBQ2hEO1FBQ0Y7SUFDRjtJQUVBLE1BQWNhLFVBQVVDLFNBQWlCLEVBQXVDO1lBQXJDQyxTQUFBQSxpRUFBc0I7WUFBRUMsUUFBUTtRQUFFO1FBQzNFLElBQUksQ0FBQyxJQUFJLENBQUNyQixP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QjtJQUMxQixNQUFNVyxXQUFXLElBQUlDLGlCQUFpQjtRQUNwQ1o7SUFDRjtJQUVBVyxTQUFTRSxPQUFPLENBQUNYLFNBQVNZLElBQUksRUFBRTtRQUM5QkMsV0FBVztRQUNYQyxTQUFTO0lBQ1g7SUFFQSxPQUFPLElBQU1MLFNBQVNNLFVBQVU7QUFDbEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbnlyby9Eb3dubG9hZHMvaG9tZS91YnVudHUvaWdsb29fY2xvbmUvc3JjL2xpYi9zb3VuZE1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbmhhbmNlZCBTb3VuZCBNYW5hZ2VyIGZvciAxQUJFTCAtIEJlYXV0aWZ1bCBPR0cgQXVkaW8gU3lzdGVtXG4gKiBVc2VzIHByb2Zlc3Npb25hbCBPR0cgYXVkaW8gZmlsZXMgZm9yIGltbWVyc2l2ZSBleHBlcmllbmNlXG4gKi9cblxuaW50ZXJmYWNlIFNvdW5kQ29uZmlnIHtcbiAgdm9sdW1lOiBudW1iZXJcbiAgbG9vcD86IGJvb2xlYW5cbiAgZmFkZUluPzogbnVtYmVyXG4gIGZhZGVPdXQ/OiBudW1iZXJcbn1cblxuZXhwb3J0IGNsYXNzIFNvdW5kTWFuYWdlciB7XG4gIHByaXZhdGUgZW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlICAvLyBTdGFydCBtdXRlZCBieSBkZWZhdWx0XG4gIHByaXZhdGUgZ2xvYmFsVm9sdW1lOiBudW1iZXIgPSAwLjRcbiAgcHJpdmF0ZSBjb250ZXh0OiBBdWRpb0NvbnRleHQgfCBudWxsID0gbnVsbFxuICBwcml2YXRlIGluaXRpYWxpemVkOiBib29sZWFuID0gZmFsc2VcbiAgcHJpdmF0ZSBhdWRpb0J1ZmZlcnM6IE1hcDxzdHJpbmcsIEF1ZGlvQnVmZmVyPiA9IG5ldyBNYXAoKVxuICBwcml2YXRlIGN1cnJlbnRseVBsYXlpbmc6IE1hcDxzdHJpbmcsIEF1ZGlvQnVmZmVyU291cmNlTm9kZT4gPSBuZXcgTWFwKClcbiAgcHJpdmF0ZSBiYWNrZ3JvdW5kTXVzaWM6IEF1ZGlvQnVmZmVyU291cmNlTm9kZSB8IG51bGwgPSBudWxsXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBvbiBmaXJzdCB1c2VyIGludGVyYWN0aW9uXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBbJ2NsaWNrJywgJ3RvdWNoc3RhcnQnLCAna2V5ZG93biddLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgKCkgPT4gdGhpcy5pbml0KCksIHsgb25jZTogdHJ1ZSB9KVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGluaXQoKSB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHJldHVyblxuICAgIFxuICAgIHRyeSB7XG4gICAgICB0aGlzLmNvbnRleHQgPSBuZXcgKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgKHdpbmRvdyBhcyBhbnkpLndlYmtpdEF1ZGlvQ29udGV4dCkoKVxuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWVcbiAgICAgIFxuICAgICAgLy8gUHJlbG9hZCBrZXkgYXVkaW8gZmlsZXNcbiAgICAgIGF3YWl0IHRoaXMucHJlbG9hZFNvdW5kcygpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybignQXVkaW8gY29udGV4dCBpbml0aWFsaXphdGlvbiBmYWlsZWQ6JywgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBwcmVsb2FkU291bmRzKCkge1xuICAgIGNvbnN0IHNvdW5kRmlsZXMgPSBbXG4gICAgICAndWktc2hvcnQub2dnJyxcbiAgICAgICd1aS1sb25nLm9nZycsIFxuICAgICAgJ2NsaWNrLXByb2plY3Qub2dnJyxcbiAgICAgICdlbnRlci1wcm9qZWN0Lm9nZycsXG4gICAgICAnbGVhdmUtcHJvamVjdC5vZ2cnLFxuICAgICAgJ2xvZ28ub2dnJyxcbiAgICAgICdiZWVwcy5vZ2cnLFxuICAgICAgJ2JlZXBzMi5vZ2cnLFxuICAgICAgJ2JlZXBzMy5vZ2cnLFxuICAgICAgJ3BhcnRpY2xlcy5vZ2cnLFxuICAgICAgJ3NoYXJkLm9nZycsXG4gICAgICAnd2luZC5vZ2cnLFxuICAgICAgJ2NpcmNsZXMub2dnJyxcbiAgICAgICdtYW5pZmVzdG8ub2dnJyxcbiAgICAgICdtdXNpYy1oaWdocS5vZ2cnLFxuICAgICAgJ3Jvb20ub2dnJ1xuICAgIF1cblxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBzb3VuZEZpbGVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvc291bmRzLyR7ZmlsZX1gKVxuICAgICAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKClcbiAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCB0aGlzLmNvbnRleHQhLmRlY29kZUF1ZGlvRGF0YShhcnJheUJ1ZmZlcilcbiAgICAgICAgdGhpcy5hdWRpb0J1ZmZlcnMuc2V0KGZpbGUucmVwbGFjZSgnLm9nZycsICcnKSwgYXVkaW9CdWZmZXIpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byBsb2FkIHNvdW5kOiAke2ZpbGV9YCwgZXJyb3IpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBwbGF5U291bmQoc291bmROYW1lOiBzdHJpbmcsIGNvbmZpZzogU291bmRDb25maWcgPSB7IHZvbHVtZTogMSB9KSB7XG4gICAgaWYgKCF0aGlzLmNvbnRleHQgfHwgIXRoaXMuZW5hYmxlZCB8fCAhdGhpcy5hdWRpb0J1ZmZlcnMuaGFzKHNvdW5kTmFtZSkpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBTb3VuZCAke3NvdW5kTmFtZX0gbm90IHBsYXllZDogZW5hYmxlZD0ke3RoaXMuZW5hYmxlZH0sIGNvbnRleHQ9JHshIXRoaXMuY29udGV4dH0sIGhhc0J1ZmZlcj0ke3RoaXMuYXVkaW9CdWZmZXJzLmhhcyhzb3VuZE5hbWUpfWApXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXIgPSB0aGlzLmF1ZGlvQnVmZmVycy5nZXQoc291bmROYW1lKSFcbiAgICBjb25zdCBzb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKClcbiAgICBjb25zdCBnYWluTm9kZSA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKClcblxuICAgIHNvdXJjZS5idWZmZXIgPSBidWZmZXJcbiAgICBzb3VyY2UuY29ubmVjdChnYWluTm9kZSlcbiAgICBnYWluTm9kZS5jb25uZWN0KHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbilcblxuICAgIC8vIFNldCB2b2x1bWVcbiAgICBjb25zdCB2b2x1bWUgPSB0aGlzLmdsb2JhbFZvbHVtZSAqIGNvbmZpZy52b2x1bWVcbiAgICBnYWluTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKHZvbHVtZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lKVxuXG4gICAgLy8gSGFuZGxlIGZhZGUgaW4vb3V0XG4gICAgaWYgKGNvbmZpZy5mYWRlSW4pIHtcbiAgICAgIGdhaW5Ob2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUoMCwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lKVxuICAgICAgZ2Fpbk5vZGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSh2b2x1bWUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIGNvbmZpZy5mYWRlSW4pXG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5mYWRlT3V0KSB7XG4gICAgICBnYWluTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKHZvbHVtZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICsgYnVmZmVyLmR1cmF0aW9uIC0gY29uZmlnLmZhZGVPdXQpXG4gICAgICBnYWluTm9kZS5nYWluLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKDAsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIGJ1ZmZlci5kdXJhdGlvbilcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgbG9vcGluZ1xuICAgIHNvdXJjZS5sb29wID0gY29uZmlnLmxvb3AgfHwgZmFsc2VcblxuICAgIC8vIFN0b3JlIHJlZmVyZW5jZSBmb3IgcG90ZW50aWFsIHN0b3BwaW5nXG4gICAgdGhpcy5jdXJyZW50bHlQbGF5aW5nLnNldChzb3VuZE5hbWUsIHNvdXJjZSlcblxuICAgIC8vIENsZWFuIHVwIHdoZW4gZmluaXNoZWRcbiAgICBzb3VyY2Uub25lbmRlZCA9ICgpID0+IHtcbiAgICAgIHRoaXMuY3VycmVudGx5UGxheWluZy5kZWxldGUoc291bmROYW1lKVxuICAgIH1cblxuICAgIHNvdXJjZS5zdGFydCgpXG4gICAgcmV0dXJuIHNvdXJjZVxuICB9XG5cbiAgLy8gVUkgU291bmQgRWZmZWN0cyB3aXRoIE9HRyBmaWxlc1xuICBwdWJsaWMgcGxheUhvdmVyKCkge1xuICAgIHRoaXMucGxheVNvdW5kKCd1aS1zaG9ydCcsIHsgdm9sdW1lOiAwLjMgfSlcbiAgfVxuXG4gIHB1YmxpYyBwbGF5Q2xpY2soKSB7XG4gICAgdGhpcy5wbGF5U291bmQoJ2NsaWNrLXByb2plY3QnLCB7IHZvbHVtZTogMC41IH0pXG4gIH1cblxuICBwdWJsaWMgcGxheVN1Y2Nlc3MoKSB7XG4gICAgdGhpcy5wbGF5U291bmQoJ2JlZXBzJywgeyB2b2x1bWU6IDAuNCB9KVxuICB9XG5cbiAgcHVibGljIHBsYXlFbnRlcigpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgnZW50ZXItcHJvamVjdCcsIHsgdm9sdW1lOiAwLjYgfSlcbiAgfVxuXG4gIHB1YmxpYyBwbGF5TGVhdmUoKSB7XG4gICAgdGhpcy5wbGF5U291bmQoJ2xlYXZlLXByb2plY3QnLCB7IHZvbHVtZTogMC40IH0pXG4gIH1cblxuICBwdWJsaWMgcGxheUxvZ28oKSB7XG4gICAgdGhpcy5wbGF5U291bmQoJ2xvZ28nLCB7IHZvbHVtZTogMC41IH0pXG4gIH1cblxuICBwdWJsaWMgcGxheVBhcnRpY2xlcygpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgncGFydGljbGVzJywgeyB2b2x1bWU6IDAuMywgbG9vcDogdHJ1ZSB9KVxuICB9XG5cbiAgcHVibGljIHBsYXlTaGFyZCgpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgnc2hhcmQnLCB7IHZvbHVtZTogMC40IH0pXG4gIH1cblxuICBwdWJsaWMgcGxheUJlZXBzKHZhcmlhdGlvbjogbnVtYmVyID0gMSkge1xuICAgIGNvbnN0IHNvdW5kTmFtZSA9IHZhcmlhdGlvbiA9PT0gMSA/ICdiZWVwcycgOiB2YXJpYXRpb24gPT09IDIgPyAnYmVlcHMyJyA6ICdiZWVwczMnXG4gICAgdGhpcy5wbGF5U291bmQoc291bmROYW1lLCB7IHZvbHVtZTogMC40IH0pXG4gIH1cblxuICBwdWJsaWMgcGxheVdpbmQoKSB7XG4gICAgdGhpcy5wbGF5U291bmQoJ3dpbmQnLCB7IHZvbHVtZTogMC4yLCBsb29wOiB0cnVlLCBmYWRlSW46IDIgfSlcbiAgfVxuXG4gIHB1YmxpYyBwbGF5Q2lyY2xlcygpIHtcbiAgICB0aGlzLnBsYXlTb3VuZCgnY2lyY2xlcycsIHsgdm9sdW1lOiAwLjMgfSlcbiAgfVxuXG4gIHB1YmxpYyBwbGF5TWFuaWZlc3RvKCkge1xuICAgIHRoaXMucGxheVNvdW5kKCdtYW5pZmVzdG8nLCB7IHZvbHVtZTogMC41IH0pXG4gIH1cblxuICBwdWJsaWMgcGxheUlnbG9vKCkge1xuICAgIHRoaXMucGxheVNvdW5kKCdpZ2xvbycsIHsgdm9sdW1lOiAwLjMgfSlcbiAgfVxuXG4gIHB1YmxpYyBwbGF5UHJvamVjdFRleHQoKSB7XG4gICAgdGhpcy5wbGF5U291bmQoJ3Byb2plY3QtdGV4dCcsIHsgdm9sdW1lOiAwLjQgfSlcbiAgfVxuXG4gIC8vIFJhbmRvbSBzb3VuZCB2YXJpYXRpb25zXG4gIHB1YmxpYyBwbGF5UmFuZG9tQmVlcCgpIHtcbiAgICBjb25zdCB2YXJpYXRpb24gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzKSArIDFcbiAgICB0aGlzLnBsYXlCZWVwcyh2YXJpYXRpb24pXG4gIH1cblxuICBwdWJsaWMgcGxheVJhbmRvbVVJKCkge1xuICAgIGNvbnN0IHNvdW5kcyA9IFsndWktc2hvcnQnLCAndWktbG9uZyddXG4gICAgY29uc3Qgc291bmQgPSBzb3VuZHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc291bmRzLmxlbmd0aCldXG4gICAgdGhpcy5wbGF5U291bmQoc291bmQsIHsgdm9sdW1lOiAwLjMgfSlcbiAgfVxuXG4gIC8vIEJhY2tncm91bmQgbXVzaWNcbiAgcHVibGljIGFzeW5jIHN0YXJ0QmFja2dyb3VuZE11c2ljKCkge1xuICAgIGlmICh0aGlzLmJhY2tncm91bmRNdXNpYykgcmV0dXJuXG4gICAgXG4gICAgdGhpcy5iYWNrZ3JvdW5kTXVzaWMgPSBhd2FpdCB0aGlzLnBsYXlTb3VuZCgnbXVzaWMtaGlnaHEnLCB7IFxuICAgICAgdm9sdW1lOiAwLjE1LCBcbiAgICAgIGxvb3A6IHRydWUsIFxuICAgICAgZmFkZUluOiAzIFxuICAgIH0pIHx8IG51bGxcbiAgfVxuXG4gIHB1YmxpYyBzdG9wQmFja2dyb3VuZE11c2ljKCkge1xuICAgIGlmICh0aGlzLmJhY2tncm91bmRNdXNpYykge1xuICAgICAgdGhpcy5iYWNrZ3JvdW5kTXVzaWMuc3RvcCgpXG4gICAgICB0aGlzLmJhY2tncm91bmRNdXNpYyA9IG51bGxcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcGxheVJvb21BbWJpZW50KCkge1xuICAgIHRoaXMucGxheVNvdW5kKCdyb29tJywgeyB2b2x1bWU6IDAuMiwgbG9vcDogdHJ1ZSwgZmFkZUluOiAyIH0pXG4gIH1cblxuICBwdWJsaWMgc3RvcFNvdW5kKHNvdW5kTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3Qgc291cmNlID0gdGhpcy5jdXJyZW50bHlQbGF5aW5nLmdldChzb3VuZE5hbWUpXG4gICAgaWYgKHNvdXJjZSkge1xuICAgICAgc291cmNlLnN0b3AoKVxuICAgICAgdGhpcy5jdXJyZW50bHlQbGF5aW5nLmRlbGV0ZShzb3VuZE5hbWUpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0b3BBbGxTb3VuZHMoKSB7XG4gICAgdGhpcy5jdXJyZW50bHlQbGF5aW5nLmZvckVhY2goKHNvdXJjZSwgbmFtZSkgPT4ge1xuICAgICAgc291cmNlLnN0b3AoKVxuICAgIH0pXG4gICAgdGhpcy5jdXJyZW50bHlQbGF5aW5nLmNsZWFyKClcbiAgICBcbiAgICBpZiAodGhpcy5iYWNrZ3JvdW5kTXVzaWMpIHtcbiAgICAgIHRoaXMuYmFja2dyb3VuZE11c2ljLnN0b3AoKVxuICAgICAgdGhpcy5iYWNrZ3JvdW5kTXVzaWMgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGVuYWJsZSgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlXG4gIH1cblxuICBwdWJsaWMgZGlzYWJsZSgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZVxuICAgIHRoaXMuc3RvcEFsbFNvdW5kcygpXG4gIH1cblxuICBwdWJsaWMgc2V0Vm9sdW1lKHZvbHVtZTogbnVtYmVyKSB7XG4gICAgdGhpcy5nbG9iYWxWb2x1bWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB2b2x1bWUpKVxuICB9XG59XG5cbi8vIEdsb2JhbCBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IHNvdW5kTWFuYWdlciA9IG5ldyBTb3VuZE1hbmFnZXIoKVxuXG4vLyBSZWFjdCBob29rIGZvciB1c2luZyBlbmhhbmNlZCBzb3VuZCBtYW5hZ2VyXG5leHBvcnQgZnVuY3Rpb24gdXNlU291bmQoKSB7XG4gIHJldHVybiB7XG4gICAgLy8gQmFzaWMgVUkgc291bmRzXG4gICAgcGxheUhvdmVyOiAoKSA9PiBzb3VuZE1hbmFnZXIucGxheUhvdmVyKCksXG4gICAgcGxheUNsaWNrOiAoKSA9PiBzb3VuZE1hbmFnZXIucGxheUNsaWNrKCksXG4gICAgcGxheVN1Y2Nlc3M6ICgpID0+IHNvdW5kTWFuYWdlci5wbGF5U3VjY2VzcygpLFxuICAgIFxuICAgIC8vIEVuaGFuY2VkIHNvdW5kc1xuICAgIHBsYXlFbnRlcjogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlFbnRlcigpLFxuICAgIHBsYXlMZWF2ZTogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlMZWF2ZSgpLFxuICAgIHBsYXlMb2dvOiAoKSA9PiBzb3VuZE1hbmFnZXIucGxheUxvZ28oKSxcbiAgICBwbGF5UGFydGljbGVzOiAoKSA9PiBzb3VuZE1hbmFnZXIucGxheVBhcnRpY2xlcygpLFxuICAgIHBsYXlTaGFyZDogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlTaGFyZCgpLFxuICAgIHBsYXlCZWVwczogKHZhcmlhdGlvbj86IG51bWJlcikgPT4gc291bmRNYW5hZ2VyLnBsYXlCZWVwcyh2YXJpYXRpb24pLFxuICAgIHBsYXlXaW5kOiAoKSA9PiBzb3VuZE1hbmFnZXIucGxheVdpbmQoKSxcbiAgICBwbGF5Q2lyY2xlczogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlDaXJjbGVzKCksXG4gICAgcGxheU1hbmlmZXN0bzogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlNYW5pZmVzdG8oKSxcbiAgICBcbiAgICAvLyBCYWNrZ3JvdW5kIHNvdW5kc1xuICAgIHN0YXJ0QmFja2dyb3VuZE11c2ljOiAoKSA9PiBzb3VuZE1hbmFnZXIuc3RhcnRCYWNrZ3JvdW5kTXVzaWMoKSxcbiAgICBzdG9wQmFja2dyb3VuZE11c2ljOiAoKSA9PiBzb3VuZE1hbmFnZXIuc3RvcEJhY2tncm91bmRNdXNpYygpLFxuICAgIHBsYXlSb29tQW1iaWVudDogKCkgPT4gc291bmRNYW5hZ2VyLnBsYXlSb29tQW1iaWVudCgpLFxuICAgIFxuICAgIC8vIENvbnRyb2xzXG4gICAgc3RvcFNvdW5kOiAobmFtZTogc3RyaW5nKSA9PiBzb3VuZE1hbmFnZXIuc3RvcFNvdW5kKG5hbWUpLFxuICAgIHN0b3BBbGxTb3VuZHM6ICgpID0+IHNvdW5kTWFuYWdlci5zdG9wQWxsU291bmRzKCksXG4gICAgZW5hYmxlOiAoKSA9PiBzb3VuZE1hbmFnZXIuZW5hYmxlKCksXG4gICAgZGlzYWJsZTogKCkgPT4gc291bmRNYW5hZ2VyLmRpc2FibGUoKSxcbiAgICBzZXRWb2x1bWU6ICh2b2x1bWU6IG51bWJlcikgPT4gc291bmRNYW5hZ2VyLnNldFZvbHVtZSh2b2x1bWUpXG4gIH1cbn1cblxuLy8gQWRkIGVuaGFuY2VkIGhvdmVyIHNvdW5kcyB0byBlbGVtZW50c1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEhvdmVyU291bmQoZWxlbWVudDogSFRNTEVsZW1lbnQsIHNvdW5kVHlwZTogJ2RlZmF1bHQnIHwgJ2VudGVyJyB8ICdsb2dvJyB8ICdzaGFyZCcgPSAnZGVmYXVsdCcpIHtcbiAgY29uc3QgaGFuZGxlTW91c2VFbnRlciA9ICgpID0+IHtcbiAgICBzd2l0Y2ggKHNvdW5kVHlwZSkge1xuICAgICAgY2FzZSAnZW50ZXInOlxuICAgICAgICBzb3VuZE1hbmFnZXIucGxheUVudGVyKClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2xvZ28nOlxuICAgICAgICBzb3VuZE1hbmFnZXIucGxheUxvZ28oKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc2hhcmQnOlxuICAgICAgICBzb3VuZE1hbmFnZXIucGxheVNoYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHNvdW5kTWFuYWdlci5wbGF5SG92ZXIoKVxuICAgIH1cbiAgfVxuICBcbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoKSA9PiBzb3VuZE1hbmFnZXIucGxheUNsaWNrKClcbiAgY29uc3QgaGFuZGxlTW91c2VMZWF2ZSA9ICgpID0+IHtcbiAgICBpZiAoc291bmRUeXBlID09PSAnZW50ZXInKSB7XG4gICAgICBzb3VuZE1hbmFnZXIucGxheUxlYXZlKClcbiAgICB9XG4gIH1cblxuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBoYW5kbGVNb3VzZUVudGVyKVxuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2spXG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGhhbmRsZU1vdXNlTGVhdmUpXG5cbiAgLy8gUmV0dXJuIGNsZWFudXAgZnVuY3Rpb25cbiAgcmV0dXJuICgpID0+IHtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBoYW5kbGVNb3VzZUVudGVyKVxuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGljaylcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBoYW5kbGVNb3VzZUxlYXZlKVxuICB9XG59XG5cbi8vIEluaXRpYWxpemUgaW50ZXJhY3RpdmUgc291bmRzIGZvciBidXR0b25zIHdpdGggZW5oYW5jZWQgYXVkaW9cbmV4cG9ydCBmdW5jdGlvbiBpbml0SW50ZXJhY3RpdmVTb3VuZHMoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuXG5cbiAgLy8gQWRkIHNvdW5kcyB0byBkaWZmZXJlbnQgZWxlbWVudCB0eXBlc1xuICBjb25zdCBhZGRTb3VuZHNUb0J1dHRvbnMgPSAoKSA9PiB7XG4gICAgLy8gTG9nbyBlbGVtZW50cyBnZXQgc3BlY2lhbCBsb2dvIHNvdW5kXG4gICAgY29uc3QgbG9nb0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc291bmQ9XCJsb2dvXCJdJylcbiAgICBsb2dvRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgIWVsZW1lbnQuZGF0YXNldC5zb3VuZEFkZGVkKSB7XG4gICAgICAgIGFkZEhvdmVyU291bmQoZWxlbWVudCwgJ2xvZ28nKVxuICAgICAgICBlbGVtZW50LmRhdGFzZXQuc291bmRBZGRlZCA9ICd0cnVlJ1xuICAgICAgfVxuICAgIH0pXG4gICAgXG4gICAgLy8gU3BlY2lhbCBlbnRyYW5jZSBlbGVtZW50c1xuICAgIGNvbnN0IGVudGVyRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1zb3VuZD1cImVudGVyXCJdJylcbiAgICBlbnRlckVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmICFlbGVtZW50LmRhdGFzZXQuc291bmRBZGRlZCkge1xuICAgICAgICBhZGRIb3ZlclNvdW5kKGVsZW1lbnQsICdlbnRlcicpXG4gICAgICAgIGVsZW1lbnQuZGF0YXNldC5zb3VuZEFkZGVkID0gJ3RydWUnXG4gICAgICB9XG4gICAgfSlcbiAgICBcbiAgICAvLyBTaGFycC9jcnlzdGFsIGVsZW1lbnRzXG4gICAgY29uc3Qgc2hhcmRFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXNvdW5kPVwic2hhcmRcIl0nKVxuICAgIHNoYXJkRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgIWVsZW1lbnQuZGF0YXNldC5zb3VuZEFkZGVkKSB7XG4gICAgICAgIGFkZEhvdmVyU291bmQoZWxlbWVudCwgJ3NoYXJkJylcbiAgICAgICAgZWxlbWVudC5kYXRhc2V0LnNvdW5kQWRkZWQgPSAndHJ1ZSdcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gUmVndWxhciBidXR0b25zIGFuZCBsaW5rc1xuICAgIGNvbnN0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24sIGFbaHJlZl0sIFtyb2xlPVwiYnV0dG9uXCJdJylcbiAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgIGlmIChidXR0b24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiAhYnV0dG9uLmRhdGFzZXQuc291bmRBZGRlZCAmJiAhYnV0dG9uLmRhdGFzZXQuc291bmQpIHtcbiAgICAgICAgYWRkSG92ZXJTb3VuZChidXR0b24sICdkZWZhdWx0JylcbiAgICAgICAgYnV0dG9uLmRhdGFzZXQuc291bmRBZGRlZCA9ICd0cnVlJ1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBJbml0aWFsIHNldHVwXG4gIGFkZFNvdW5kc1RvQnV0dG9ucygpXG5cbiAgLy8gUmUtcnVuIHdoZW4gRE9NIGNoYW5nZXNcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XG4gICAgYWRkU291bmRzVG9CdXR0b25zKClcbiAgfSlcblxuICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHtcbiAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgc3VidHJlZTogdHJ1ZVxuICB9KVxuXG4gIHJldHVybiAoKSA9PiBvYnNlcnZlci5kaXNjb25uZWN0KClcbn0iXSwibmFtZXMiOlsiU291bmRNYW5hZ2VyIiwiaW5pdCIsImluaXRpYWxpemVkIiwiY29udGV4dCIsIndpbmRvdyIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsInByZWxvYWRTb3VuZHMiLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwic291bmRGaWxlcyIsImZpbGUiLCJyZXNwb25zZSIsImZldGNoIiwiYXJyYXlCdWZmZXIiLCJhdWRpb0J1ZmZlciIsImRlY29kZUF1ZGlvRGF0YSIsImF1ZGlvQnVmZmVycyIsInNldCIsInJlcGxhY2UiLCJwbGF5U291bmQiLCJzb3VuZE5hbWUiLCJjb25maWciLCJ2b2x1bWUiLCJlbmFibGVkIiwiaGFzIiwibG9nIiwiYnVmZmVyIiwiZ2V0Iiwic291cmNlIiwiY3JlYXRlQnVmZmVyU291cmNlIiwiZ2Fpbk5vZGUiLCJjcmVhdGVHYWluIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwiZ2xvYmFsVm9sdW1lIiwiZ2FpbiIsInNldFZhbHVlQXRUaW1lIiwiY3VycmVudFRpbWUiLCJmYWRlSW4iLCJsaW5lYXJSYW1wVG9WYWx1ZUF0VGltZSIsImZhZGVPdXQiLCJkdXJhdGlvbiIsImxvb3AiLCJjdXJyZW50bHlQbGF5aW5nIiwib25lbmRlZCIsImRlbGV0ZSIsInN0YXJ0IiwicGxheUhvdmVyIiwicGxheUNsaWNrIiwicGxheVN1Y2Nlc3MiLCJwbGF5RW50ZXIiLCJwbGF5TGVhdmUiLCJwbGF5TG9nbyIsInBsYXlQYXJ0aWNsZXMiLCJwbGF5U2hhcmQiLCJwbGF5QmVlcHMiLCJ2YXJpYXRpb24iLCJwbGF5V2luZCIsInBsYXlDaXJjbGVzIiwicGxheU1hbmlmZXN0byIsInBsYXlJZ2xvbyIsInBsYXlQcm9qZWN0VGV4dCIsInBsYXlSYW5kb21CZWVwIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicGxheVJhbmRvbVVJIiwic291bmRzIiwic291bmQiLCJsZW5ndGgiLCJzdGFydEJhY2tncm91bmRNdXNpYyIsImJhY2tncm91bmRNdXNpYyIsInN0b3BCYWNrZ3JvdW5kTXVzaWMiLCJzdG9wIiwicGxheVJvb21BbWJpZW50Iiwic3RvcFNvdW5kIiwic3RvcEFsbFNvdW5kcyIsImZvckVhY2giLCJuYW1lIiwiY2xlYXIiLCJlbmFibGUiLCJkaXNhYmxlIiwic2V0Vm9sdW1lIiwibWF4IiwibWluIiwiTWFwIiwiZXZlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsInNvdW5kTWFuYWdlciIsInVzZVNvdW5kIiwiYWRkSG92ZXJTb3VuZCIsImVsZW1lbnQiLCJzb3VuZFR5cGUiLCJoYW5kbGVNb3VzZUVudGVyIiwiaGFuZGxlQ2xpY2siLCJoYW5kbGVNb3VzZUxlYXZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImluaXRJbnRlcmFjdGl2ZVNvdW5kcyIsImFkZFNvdW5kc1RvQnV0dG9ucyIsImxvZ29FbGVtZW50cyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIkhUTUxFbGVtZW50IiwiZGF0YXNldCIsInNvdW5kQWRkZWQiLCJlbnRlckVsZW1lbnRzIiwic2hhcmRFbGVtZW50cyIsImJ1dHRvbnMiLCJidXR0b24iLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiYm9keSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJkaXNjb25uZWN0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/soundManager.ts\n"));

/***/ })

});