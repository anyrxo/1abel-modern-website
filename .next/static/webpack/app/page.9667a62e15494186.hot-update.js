"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/soundManager.ts":
/*!*********************************!*\
  !*** ./src/lib/soundManager.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SoundManager: () => (/* binding */ SoundManager),\n/* harmony export */   initInteractiveSounds: () => (/* binding */ initInteractiveSounds),\n/* harmony export */   soundManager: () => (/* binding */ soundManager),\n/* harmony export */   useSound: () => (/* binding */ useSound)\n/* harmony export */ });\n/**\n * 🎼 REVOLUTIONARY MUSICAL EXPERIENCE SYSTEM FOR 1ABEL\n * Creates flowing, atmospheric soundscapes using all 18 OGG files\n * No jarring transitions - only smooth, immersive musical journeys\n */ class SoundManager {\n    async init() {\n        if (this.initialized) return;\n        try {\n            this.context = new (window.AudioContext || window.webkitAudioContext)();\n            this.initialized = true;\n            await this.preloadAllSounds();\n        } catch (error) {\n            console.warn('Audio context initialization failed:', error);\n        }\n    }\n    async preloadAllSounds() {\n        // 🎼 Load all 18 OGG files for complete musical palette\n        const allSoundFiles = [\n            'beeps.ogg',\n            'beeps2.ogg',\n            'beeps3.ogg',\n            'ui-short.ogg',\n            'ui-long.ogg',\n            'click-project.ogg',\n            'enter-project.ogg',\n            'leave-project.ogg',\n            'project-text.ogg',\n            'particles.ogg',\n            'circles.ogg',\n            'shard.ogg',\n            'logo.ogg',\n            'manifesto.ogg',\n            'igloo.ogg',\n            'wind.ogg',\n            'room.ogg',\n            'music-highq.ogg'\n        ];\n        const loadPromises = allSoundFiles.map(async (file)=>{\n            try {\n                const response = await fetch(\"/sounds/\".concat(file));\n                const arrayBuffer = await response.arrayBuffer();\n                const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n                this.audioBuffers.set(file.replace('.ogg', ''), audioBuffer);\n            } catch (error) {\n                console.warn(\"Failed to load sound: \".concat(file), error);\n            }\n        });\n        await Promise.all(loadPromises);\n        console.log(\"\\uD83C\\uDFB5 Loaded \".concat(this.audioBuffers.size, \"/18 sound files\"));\n    }\n    // 🌊 SMOOTH LAYERED SOUND SYSTEM - NO JARRING CUTS\n    async createLayeredSound(soundName, config) {\n        if (!this.context || !this.enabled || !this.audioBuffers.has(soundName)) {\n            return null;\n        }\n        const buffer = this.audioBuffers.get(soundName);\n        const source = this.context.createBufferSource();\n        const gainNode = this.context.createGain();\n        source.buffer = buffer;\n        source.connect(gainNode);\n        gainNode.connect(this.context.destination);\n        source.loop = config.loop || false;\n        const targetVolume = this.globalVolume * config.volume;\n        // 🎵 SMOOTH FADE IN - No sudden jumps\n        if (config.fadeIn && config.fadeIn > 0) {\n            gainNode.gain.setValueAtTime(0, this.context.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(Math.max(targetVolume, 0.001), this.context.currentTime + config.fadeIn);\n        } else {\n            gainNode.gain.setValueAtTime(targetVolume, this.context.currentTime);\n        }\n        const layeredSound = {\n            name: soundName,\n            gainNode,\n            source,\n            volume: targetVolume\n        };\n        source.start();\n        return layeredSound;\n    }\n    // 🎹 CROSSFADE SYSTEM - Smooth transitions between sounds\n    async crossfadeToSound(fromSound, toSound) {\n        let duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2;\n        if (!this.enabled) return;\n        const fromLayer = this.activeLayers.get(fromSound);\n        // Start new sound with fade in\n        const newLayer = await this.createLayeredSound(toSound, {\n            volume: 0.3,\n            fadeIn: duration,\n            loop: this.AMBIENT_SOUNDS.includes(toSound)\n        });\n        if (newLayer) {\n            this.activeLayers.set(toSound, newLayer);\n        }\n        // Fade out old sound\n        if (fromLayer && this.context) {\n            fromLayer.gainNode.gain.exponentialRampToValueAtTime(0.001, this.context.currentTime + duration);\n            setTimeout(()=>{\n                if (fromLayer.source) {\n                    fromLayer.source.stop();\n                }\n                this.activeLayers.delete(fromSound);\n            }, duration * 1000);\n        }\n    }\n    // 🌟 ATMOSPHERIC FOUNDATION - Gentle ambient layers\n    async startAtmosphericFoundation() {\n        if (!this.enabled) return;\n        // 🌊 Wind - Gentle natural breath\n        const windLayer = await this.createLayeredSound('wind', {\n            volume: 0.1,\n            loop: true,\n            fadeIn: 4\n        });\n        if (windLayer) this.activeLayers.set('wind', windLayer);\n        // 🏠 Room tone - Warm spatial presence  \n        setTimeout(async ()=>{\n            const roomLayer = await this.createLayeredSound('room', {\n                volume: 0.15,\n                loop: true,\n                fadeIn: 3\n            });\n            if (roomLayer) this.activeLayers.set('room', roomLayer);\n        }, 2000);\n        // 🎵 Gentle background music - Musical foundation\n        setTimeout(async ()=>{\n            const musicLayer = await this.createLayeredSound('music-highq', {\n                volume: 0.12,\n                loop: true,\n                fadeIn: 5\n            });\n            if (musicLayer) this.activeLayers.set('music-highq', musicLayer);\n        }, 4000);\n    }\n    // 🎭 MUSICAL PHRASE SYSTEM - Flowing melodies instead of single notes\n    async playMusicalPhrase(family) {\n        let intensity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'medium';\n        if (!this.enabled) return;\n        const sounds = this.SOUND_FAMILIES[family];\n        const volumes = {\n            gentle: [\n                0.2,\n                0.25,\n                0.3\n            ],\n            medium: [\n                0.3,\n                0.35,\n                0.4\n            ],\n            powerful: [\n                0.4,\n                0.45,\n                0.5\n            ]\n        };\n        // 🎼 Play sounds as a flowing musical phrase\n        for(let i = 0; i < sounds.length; i++){\n            setTimeout(async ()=>{\n                const layer = await this.createLayeredSound(sounds[i], {\n                    volume: volumes[intensity][i] || 0.3,\n                    fadeIn: 0.3,\n                    fadeOut: 0.5\n                });\n                if (layer) {\n                    var _layer_source_buffer;\n                    // Auto-cleanup after sound ends\n                    setTimeout(()=>{\n                        this.activeLayers.delete(sounds[i]);\n                    }, (((_layer_source_buffer = layer.source.buffer) === null || _layer_source_buffer === void 0 ? void 0 : _layer_source_buffer.duration) || 1) * 1000 + 500);\n                }\n            }, i * 800); // Gentle timing between notes\n        }\n    }\n    // 🌊 FLUID INTERACTION SYSTEM - Smooth responses to user actions\n    // ✨ GENTLE UI HARMONICS\n    async playGentleUIFlow() {\n        await this.playMusicalPhrase('ui', 'gentle');\n    }\n    async playUIClick() {\n        const uiSounds = [\n            'ui-short',\n            'ui-long',\n            'click-project'\n        ];\n        const randomUI = uiSounds[Math.floor(Math.random() * uiSounds.length)];\n        const layer = await this.createLayeredSound(randomUI, {\n            volume: 0.25,\n            fadeIn: 0.1,\n            fadeOut: 0.3\n        });\n        if (layer) {\n            setTimeout(()=>this.activeLayers.delete(randomUI), 2000);\n        }\n    }\n    // 🚪 PROJECT GATEWAY FLOW - Smooth entrance/exit experience\n    async playProjectEnter() {\n        // Layer entrance sounds for rich experience\n        const enterLayer = await this.createLayeredSound('enter-project', {\n            volume: 0.4,\n            fadeIn: 0.5\n        });\n        setTimeout(async ()=>{\n            const circlesLayer = await this.createLayeredSound('circles', {\n                volume: 0.2,\n                fadeIn: 0.3\n            });\n        }, 300);\n        setTimeout(async ()=>{\n            const projectLayer = await this.createLayeredSound('project-text', {\n                volume: 0.25,\n                fadeIn: 0.4\n            });\n        }, 600);\n    }\n    async playProjectLeave() {\n        // Gentle farewell sequence\n        const leaveLayer = await this.createLayeredSound('leave-project', {\n            volume: 0.3,\n            fadeIn: 0.2,\n            fadeOut: 1\n        });\n        setTimeout(async ()=>{\n            const windLayer = this.activeLayers.get('wind');\n            if (windLayer && this.context) {\n                // Boost wind slightly for gentle closure\n                windLayer.gainNode.gain.exponentialRampToValueAtTime(0.15, this.context.currentTime + 1);\n            }\n        }, 500);\n    }\n    // 🎵 HARMONIC PROGRESSION SYSTEM\n    async playHarmonicProgression() {\n        let progression = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'ascending';\n        const beepSounds = [\n            'beeps',\n            'beeps2',\n            'beeps3'\n        ];\n        let sequence = beepSounds;\n        if (progression === 'descending') sequence = [\n            ...beepSounds\n        ].reverse();\n        if (progression === 'circular') sequence = [\n            ...beepSounds,\n            'beeps2'\n        ];\n        for(let i = 0; i < sequence.length; i++){\n            setTimeout(async ()=>{\n                const layer = await this.createLayeredSound(sequence[i], {\n                    volume: 0.35 - i * 0.05,\n                    fadeIn: 0.2,\n                    fadeOut: 0.4\n                });\n            }, i * 600);\n        }\n    }\n    // 🌟 MYSTICAL AMBIENCE BUILDER\n    async buildMysticalAmbience() {\n        // Layer mystical sounds to create atmosphere\n        const mysticalSounds = [\n            'particles',\n            'circles',\n            'shard'\n        ];\n        for(let i = 0; i < mysticalSounds.length; i++){\n            setTimeout(async ()=>{\n                const layer = await this.createLayeredSound(mysticalSounds[i], {\n                    volume: 0.15 + i * 0.05,\n                    fadeIn: 1 + i * 0.5,\n                    loop: i === 0 // Only particles loop gently\n                });\n                if (layer && i === 0) {\n                    this.activeLayers.set(mysticalSounds[i], layer);\n                }\n            }, i * 1000);\n        }\n    }\n    // 👑 LOGO IDENTITY SYMPHONY\n    async playLogoIdentityFlow() {\n        // Grand, flowing logo presentation\n        const logoLayer = await this.createLayeredSound('logo', {\n            volume: 0.5,\n            fadeIn: 0.3\n        });\n        setTimeout(async ()=>{\n            const manifestoLayer = await this.createLayeredSound('manifesto', {\n                volume: 0.35,\n                fadeIn: 0.4\n            });\n        }, 600);\n        setTimeout(async ()=>{\n            const iglooLayer = await this.createLayeredSound('igloo', {\n                volume: 0.3,\n                fadeIn: 0.5\n            });\n        }, 1200);\n        // Follow with harmonic progression\n        setTimeout(()=>{\n            this.playHarmonicProgression('ascending');\n        }, 2000);\n    }\n    // 🌊 CONTEXTUAL AMBIENCE SYSTEM\n    async setContextualAmbience(context) {\n        // Smoothly transition ambient layers based on context\n        switch(context){\n            case 'calm':\n                await this.crossfadeToSound('music-highq', 'wind', 3);\n                setTimeout(()=>this.enhanceAmbientLayer('room', 0.2), 1000);\n                break;\n            case 'focused':\n                await this.crossfadeToSound('wind', 'room', 2);\n                setTimeout(()=>this.enhanceAmbientLayer('music-highq', 0.1), 1500);\n                break;\n            case 'creative':\n                this.buildMysticalAmbience();\n                setTimeout(()=>this.enhanceAmbientLayer('music-highq', 0.18), 2000);\n                break;\n            case 'mystical':\n                this.buildMysticalAmbience();\n                setTimeout(()=>this.playHarmonicProgression('circular'), 3000);\n                break;\n        }\n    }\n    // 🔊 AMBIENT LAYER ENHANCEMENT\n    enhanceAmbientLayer(layerName, targetVolume) {\n        const layer = this.activeLayers.get(layerName);\n        if (layer && this.context) {\n            layer.gainNode.gain.exponentialRampToValueAtTime(targetVolume, this.context.currentTime + 2);\n        }\n    }\n    // 🎼 WELCOME SYMPHONY - Beautiful introduction when audio first enabled\n    async playWelcomeSymphony() {\n        if (!this.enabled) return;\n        console.log('🎼 Starting Welcome Symphony...');\n        // 1. Start atmospheric foundation\n        await this.startAtmosphericFoundation();\n        // 2. Gentle UI introduction\n        setTimeout(()=>this.playGentleUIFlow(), 2000);\n        // 3. Musical progression\n        setTimeout(()=>this.playHarmonicProgression('ascending'), 4000);\n        // 4. Set creative ambience\n        setTimeout(()=>this.setContextualAmbience('creative'), 6000);\n    }\n    // 🛑 SMOOTH SHUTDOWN SYSTEM\n    async fadeOutAllLayers() {\n        let duration = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 3;\n        if (!this.context) return;\n        for (const [name, layer] of this.activeLayers){\n            layer.gainNode.gain.exponentialRampToValueAtTime(0.001, this.context.currentTime + duration);\n        }\n        setTimeout(()=>{\n            this.activeLayers.forEach((layer)=>{\n                if (layer.source) layer.source.stop();\n            });\n            this.activeLayers.clear();\n        }, duration * 1000);\n    }\n    // 🎛️ CONTROL METHODS\n    enable() {\n        this.enabled = true;\n        console.log('🎵 Sound system enabled - Welcome to the musical journey');\n    }\n    disable() {\n        this.enabled = false;\n        this.fadeOutAllLayers(2);\n        console.log('🔇 Sound system disabled');\n    }\n    setVolume(volume) {\n        this.globalVolume = Math.max(0, Math.min(1, volume));\n        // Adjust all active layers\n        for (const layer of this.activeLayers.values()){\n            const newVolume = this.globalVolume * layer.volume;\n            if (this.context) {\n                layer.gainNode.gain.exponentialRampToValueAtTime(Math.max(newVolume, 0.001), this.context.currentTime + 0.5);\n            }\n        }\n    }\n    constructor(){\n        this.enabled = false;\n        this.globalVolume = 0.4;\n        this.context = null;\n        this.initialized = false;\n        this.audioBuffers = new Map();\n        this.activeLayers = new Map();\n        this.ambientLayers = new Set();\n        this.crossfadeTimeout = null;\n        // 🌊 ATMOSPHERIC LAYERS - Always flowing gently in the background\n        this.AMBIENT_SOUNDS = [\n            'wind',\n            'room',\n            'music-highq'\n        ];\n        // 🎵 MUSICAL FAMILIES - Grouped for harmonic progressions\n        this.SOUND_FAMILIES = {\n            beeps: [\n                'beeps',\n                'beeps2',\n                'beeps3'\n            ],\n            ui: [\n                'ui-short',\n                'ui-long',\n                'click-project'\n            ],\n            project: [\n                'enter-project',\n                'leave-project',\n                'project-text'\n            ],\n            mystical: [\n                'particles',\n                'circles',\n                'shard'\n            ],\n            identity: [\n                'logo',\n                'manifesto',\n                'igloo'\n            ]\n        };\n        // Legacy compatibility methods (with smooth implementations)\n        this.playHover = ()=>this.playUIClick();\n        this.playClick = ()=>this.playUIClick();\n        this.playEnter = ()=>this.playProjectEnter();\n        this.playLeave = ()=>this.playProjectLeave();\n        this.playSuccess = ()=>this.playHarmonicProgression('ascending');\n        this.playLogo = ()=>this.playLogoIdentityFlow();\n        this.playParticles = ()=>this.buildMysticalAmbience();\n        if (true) {\n            [\n                'click',\n                'touchstart',\n                'keydown'\n            ].forEach((event)=>{\n                window.addEventListener(event, ()=>this.init(), {\n                    once: true\n                });\n            });\n        }\n    }\n}\n// Global instance\nconst soundManager = new SoundManager();\n// React hook for smooth musical experience\nfunction useSound() {\n    return {\n        // 🌊 Smooth UI interactions\n        playHover: ()=>soundManager.playUIClick(),\n        playClick: ()=>soundManager.playUIClick(),\n        playGentleFlow: ()=>soundManager.playGentleUIFlow(),\n        // 🚪 Project navigation\n        playEnter: ()=>soundManager.playProjectEnter(),\n        playLeave: ()=>soundManager.playProjectLeave(),\n        // 🎵 Musical progressions\n        playHarmonicProgression: (type)=>soundManager.playHarmonicProgression(type),\n        // 👑 Identity sounds\n        playLogo: ()=>soundManager.playLogoIdentityFlow(),\n        // 🌟 Mystical atmosphere\n        playMystical: ()=>soundManager.buildMysticalAmbience(),\n        // 🌊 Contextual ambiences\n        setAmbience: (context)=>soundManager.setContextualAmbience(context),\n        // 🎼 Welcome experience\n        playWelcomeSymphony: ()=>soundManager.playWelcomeSymphony(),\n        // 🎛️ Controls\n        enable: ()=>soundManager.enable(),\n        disable: ()=>soundManager.disable(),\n        setVolume: (volume)=>soundManager.setVolume(volume),\n        fadeOut: (duration)=>soundManager.fadeOutAllLayers(duration)\n    };\n}\n// Enhanced interactive sound initialization\nfunction initInteractiveSounds() {\n    if (false) {}\n    let lastInteractionTime = 0;\n    const INTERACTION_COOLDOWN = 300 // Prevent sound spam\n    ;\n    const addSmoothInteraction = (element, soundType)=>{\n        const handleInteraction = async (event)=>{\n            const now = Date.now();\n            if (now - lastInteractionTime < INTERACTION_COOLDOWN) return;\n            lastInteractionTime = now;\n            switch(soundType){\n                case 'logo':\n                    soundManager.playLogoIdentityFlow();\n                    break;\n                case 'enter':\n                    soundManager.playProjectEnter();\n                    break;\n                case 'mystical':\n                    soundManager.buildMysticalAmbience();\n                    break;\n                default:\n                    soundManager.playUIClick();\n            }\n        };\n        element.addEventListener('mouseenter', handleInteraction);\n        element.addEventListener('click', handleInteraction);\n        return ()=>{\n            element.removeEventListener('mouseenter', handleInteraction);\n            element.removeEventListener('click', handleInteraction);\n        };\n    };\n    // Apply smooth interactions to elements\n    const setupSmoothSounds = ()=>{\n        document.querySelectorAll('[data-sound]').forEach((element)=>{\n            if (element instanceof HTMLElement && !element.dataset.soundSetup) {\n                const soundType = element.dataset.sound || 'default';\n                addSmoothInteraction(element, soundType);\n                element.dataset.soundSetup = 'true';\n            }\n        });\n    };\n    setupSmoothSounds();\n    // Monitor for new elements\n    const observer = new MutationObserver(setupSmoothSounds);\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n    return ()=>observer.disconnect();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/soundManager.ts\n"));

/***/ })

});